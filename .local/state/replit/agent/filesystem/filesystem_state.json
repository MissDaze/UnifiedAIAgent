{"file_contents":{"client/src/components/examples/Footer.tsx":{"content":"import { Footer } from '../Footer';\n\nexport default function FooterExample() {\n  return <Footer />;\n}\n","size_bytes":102},"client/src/pages/Login.tsx":{"content":"import { LoginForm } from \"@/components/LoginForm\";\n\nexport default function Login() {\n  return <LoginForm />;\n}\n","size_bytes":113},"client/src/components/examples/SignupForm.tsx":{"content":"import { SignupForm } from '../SignupForm';\n\nexport default function SignupFormExample() {\n  return <SignupForm />;\n}\n","size_bytes":118},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"replit.md":{"content":"# AI Nexus - Multi-Model AI Collaboration Platform\n\n## Overview\n\nAI Nexus is a web application that enables users to create AI bot teams powered by multiple AI models working together collaboratively. Users can configure individual AI bots with specific roles and capabilities, assemble them into collaborative teams, submit tasks to these teams, and review combined or individual outputs in a multi-view interface. The platform is designed for iterative AI collaboration, allowing users to refine results through follow-up interactions with individual bots or entire teams.\n\n**Core Purpose**: Enable multi-model AI collaboration through bot team orchestration and unified output management.\n\n**Key Features**:\n- Individual AI bot creation and configuration (model selection, system prompts, parameters)\n- Team assembly from multiple bots with different capabilities\n- **Full Collaborative Workspace** with multi-phase workflow:\n  - **Planning Phase**: Bots ask clarifying questions, user provides answers, tasks are assigned\n  - **Execution Phase**: Bots execute tasks sequentially, each seeing previous outputs\n  - **Review Phase**: Bots critique outputs, suggest improvements, user approves/rejects\n  - **Persistent Sessions**: Auto-resume incomplete sessions, manage multiple concurrent projects\n- Brief submission to teams for **sequential collaborative processing** (each bot sees and builds upon previous bots' outputs)\n- Multi-view output interface (combined, individual, comparison)\n- Interactive chat conversations with individual bots or entire teams\n- Persistent conversation history with automatic thread resumption\n- Output persistence and management\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack**:\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite with hot module replacement\n- **Routing**: Wouter (lightweight client-side routing)\n- **UI Components**: Radix UI primitives with shadcn/ui design system\n- **Styling**: Tailwind CSS with custom design tokens\n- **State Management**: TanStack Query (React Query) for server state\n- **Form Handling**: React Hook Form with Zod validation\n\n**Design System Rationale**:\nThe application uses a Linear-inspired design approach optimized for information density and technical sophistication. The choice prioritizes:\n- Typography-driven hierarchy using Inter and JetBrains Mono fonts\n- Minimal decoration with purposeful spacing\n- Clear visual hierarchies for complex AI outputs\n- Custom CSS variables for consistent theming (light/dark modes)\n\n**Component Architecture**:\n- Atomic design with reusable UI primitives in `/components/ui`\n- Feature-specific components in `/components` (BotCard, TeamCard, OutputMultiView, ChatInterface, etc.)\n- Page-level components in `/pages` handling route-specific logic\n- Custom hooks for authentication (`useAuth`) and common patterns\n\n**Chat System**:\n- Reusable `ChatInterface` component for bot/team conversations\n- Automatic conversation history loading and persistence\n- State management ensures clean transitions between different entities\n- Supports both individual bot chats and team-wide conversations\n\n**Path Aliases**:\n```\n@/ → client/src/\n@shared/ → shared/\n@assets/ → attached_assets/\n```\n\n### Backend Architecture\n\n**Technology Stack**:\n- **Runtime**: Node.js with TypeScript (ESM modules)\n- **Framework**: Express.js\n- **ORM**: Drizzle ORM with Neon serverless PostgreSQL\n- **Authentication**: Replit Auth with OpenID Connect\n- **Session Management**: express-session with PostgreSQL storage\n\n**API Structure**:\nRESTful API endpoints under `/api` namespace:\n- `/api/auth/*` - Authentication routes (user, login, logout)\n- `/api/bots` - Bot CRUD operations\n- `/api/teams` - Team management\n- `/api/teams/:id/sessions` - Get all collaborative sessions for a team\n- `/api/team-sessions` - Create new collaborative session\n- `/api/team-sessions/:id` - Get/update/delete specific session\n- `/api/team-sessions/:id/planning-message` - Add planning phase messages\n- `/api/team-sessions/:id/planning/bot-question` - Generate bot questions\n- `/api/team-sessions/:id/finalize-planning` - Complete planning and move to execution\n- `/api/team-sessions/:id/execute` - Execute collaborative tasks\n- `/api/team-sessions/:id/review-message` - Add review phase messages\n- `/api/team-sessions/:id/suggestion/:suggestionId` - Approve/reject bot suggestions\n- `/api/team-sessions/:id/complete` - Mark session as completed\n- `/api/outputs` - Output persistence\n- `/api/conversations` - Conversation thread management (filter by botId/teamId)\n- `/api/conversations/:id/messages` - Message history retrieval\n- `/api/bots/:id/chat` - Real-time chat with individual bots\n- `/api/teams/:id/chat` - Multi-bot team conversations\n\n**Authentication Flow**:\n1. Replit OpenID Connect integration for SSO\n2. Session-based authentication with PostgreSQL-backed sessions\n3. Protected route middleware (`isAuthenticated`) for API security\n4. User profile stored in database with Replit claims\n\n**Development vs Production**:\n- Development: Vite dev server with middleware mode, HMR enabled\n- Production: Pre-built static assets served from Express, bundled with esbuild\n\n### Data Storage\n\n**Database**: Neon Serverless PostgreSQL via `@neondatabase/serverless`\n\n**Schema Design** (shared/schema.ts):\n\n1. **users** - User accounts (from Replit Auth)\n   - Primary: User profile, email, names, profile image\n   - Purpose: Authentication and ownership tracking\n\n2. **sessions** - Session persistence (connect-pg-simple)\n   - Primary: Session data, expiration\n   - Purpose: Maintain authenticated sessions across requests\n\n3. **bots** - AI bot configurations\n   - Fields: name, model, systemPrompt, temperature, maxTokens, role, etc.\n   - Ownership: Foreign key to users\n   - Purpose: Store individual bot configurations\n\n4. **teams** - Team definitions\n   - Fields: name, description, purpose\n   - Ownership: Foreign key to users\n   - Purpose: Group bots into collaborative units\n\n5. **teamMembers** - Many-to-many relationship\n   - Links: teams ↔ bots\n   - Purpose: Team composition management\n\n6. **outputs** - Saved AI responses\n   - Fields: content, teamId, metadata\n   - Purpose: Persist team collaboration results\n\n7. **conversations** - Chat conversation threads\n   - Fields: userId, botId (optional), teamId (optional), title, createdAt\n   - Links: One-to-one with either a bot OR a team\n   - Purpose: Track conversation sessions for history\n\n8. **messages** - Individual chat messages\n   - Fields: conversationId, role (user/assistant/system), content, botId (for team chats), timestamp\n   - Ownership: Foreign key to conversations\n   - Purpose: Store complete message history for all conversations\n\n9. **teamSessions** - Collaborative workflow sessions\n   - Fields: userId, teamId, title, brief, phase (planning/execution/review/completed), createdAt\n   - JSON Fields: planningMessages, taskAssignments, executionOutputs, reviewMessages, suggestions\n   - Purpose: Track multi-phase collaborative sessions with persistent state across Planning, Execution, and Review phases\n   - Lifecycle: Created → Planning (discussion, questions, task assignment) → Execution (bot collaboration) → Review (critique, suggestions, approval) → Completed\n\n**Data Access Pattern**:\n- Repository pattern via `storage` interface (server/storage.ts)\n- Type-safe operations with Drizzle ORM\n- Zod schema validation for inserts/updates using drizzle-zod\n\n**Migration Strategy**: Drizzle Kit with `drizzle.config.ts` for schema migrations to `/migrations` directory\n\n### External Dependencies\n\n**AI Service Integration**:\n- **OpenRouter AI**: Primary AI model provider\n- Status: Fully implemented with dynamic free model fetching\n- Features:\n  - Automatic discovery of available free models via `/api/models` endpoint\n  - Streaming chat completions for both individual and team conversations\n  - Model validation with caching (scoped by API key hash)\n  - Error handling for unavailable models with UI warnings\n  - **Sequential collaborative execution** for team tasks\n- Integration points:\n  - `server/openrouter.ts`: Core OpenRouter client with model fetching and chat\n  - Bot chat: `/api/bots/:id/chat` endpoint\n  - Team chat: `/api/teams/:id/chat` endpoint (parallel bot execution)\n  - Brief delegation: Team workspace task processing via `executeCollaborativeTeamTasks`\n- Collaborative Execution Architecture:\n  - Teams execute sequentially via `executeCollaborativeTeamTasks` function\n  - Each bot receives: (1) the original project brief, (2) their specific task, (3) all previous bots' outputs\n  - Later bots can reference, build upon, or synthesize earlier teammates' work\n  - Errors are handled gracefully - a failed bot doesn't halt the entire sequence\n  - Error outputs are passed forward so subsequent bots are aware of failures\n\n**Replit Platform Services**:\n- **Replit Auth**: OpenID Connect authentication provider\n  - Discovery URL: `process.env.ISSUER_URL` (default: https://replit.com/oidc)\n  - Client credentials: `process.env.REPL_ID`\n- **Replit Domains**: Allowed hosts configuration via `process.env.REPLIT_DOMAINS`\n\n**Development Tools**:\n- **@replit/vite-plugin-runtime-error-modal**: Enhanced error overlay\n- **@replit/vite-plugin-cartographer**: Development navigation\n- **@replit/vite-plugin-dev-banner**: Dev environment indicator\n\n**Database Connection**:\n- **Neon Serverless PostgreSQL**: Via `process.env.DATABASE_URL`\n- WebSocket support for serverless environments using `ws` package\n\n**Required Environment Variables**:\n```\nDATABASE_URL          # Neon PostgreSQL connection string\nREPL_ID              # Replit application identifier\nREPLIT_DOMAINS       # Allowed domain list\nSESSION_SECRET       # Session encryption key\nISSUER_URL           # (Optional) OIDC issuer override\n```\n\n**Third-Party UI Libraries**:\n- Radix UI: Unstyled, accessible component primitives (40+ packages)\n- React Icons: Icon sets (Google, GitHub for OAuth buttons)\n- date-fns: Date manipulation and formatting\n- cmdk: Command menu interface component\n- vaul: Drawer/sheet component implementation\n\n**Build & Development Dependencies**:\n- tsx: TypeScript execution for development\n- esbuild: Production backend bundling\n- Vite: Frontend bundling and dev server\n- TypeScript: Type checking and compilation\n- Tailwind CSS: Utility-first styling with PostCSS","size_bytes":10455},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/BriefSubmission.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Send, Users } from \"lucide-react\";\n\ninterface TeamMember {\n  name: string;\n  model: string;\n}\n\ninterface BriefSubmissionProps {\n  teamName: string;\n  members: TeamMember[];\n  onSubmit?: (brief: string) => void;\n}\n\nexport function BriefSubmission({ teamName, members, onSubmit }: BriefSubmissionProps) {\n  const [brief, setBrief] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async () => {\n    if (!brief.trim()) return;\n    \n    console.log(\"Submitting brief:\", brief);\n    setIsSubmitting(true);\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    onSubmit?.(brief);\n    setIsSubmitting(false);\n  };\n\n  return (\n    <Card className=\"sticky top-0 z-10\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5 text-primary\" />\n            <CardTitle className=\"text-lg\">{teamName}</CardTitle>\n          </div>\n          <Badge variant=\"secondary\" data-testid=\"badge-member-count\">\n            {members.length} AI Bots Active\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <div className=\"flex flex-wrap gap-2\">\n          {members.map((member, index) => (\n            <Badge key={index} variant=\"outline\" data-testid={`badge-member-${index}`}>\n              {member.name} <span className=\"ml-1 text-xs font-mono opacity-70\">({member.model})</span>\n            </Badge>\n          ))}\n        </div>\n        \n        <div className=\"space-y-2\">\n          <Textarea\n            placeholder=\"Enter your brief for the team... All bots will work on this simultaneously.\"\n            className=\"min-h-32\"\n            value={brief}\n            onChange={(e) => setBrief(e.target.value)}\n            data-testid=\"textarea-brief\"\n          />\n        </div>\n        \n        <Button\n          onClick={handleSubmit}\n          disabled={!brief.trim() || isSubmitting}\n          className=\"w-full\"\n          data-testid=\"button-submit-brief\"\n        >\n          {isSubmitting ? (\n            \"Processing...\"\n          ) : (\n            <>\n              <Send className=\"h-4 w-4 mr-2\" />\n              Submit to Team\n            </>\n          )}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2664},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/AppSidebar\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nimport Home from \"@/pages/Home\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport CreateBot from \"@/pages/CreateBot\";\nimport BotsManagement from \"@/pages/BotsManagement\";\nimport TeamsManagement from \"@/pages/TeamsManagement\";\nimport CreateTeam from \"@/pages/CreateTeam\";\nimport TeamWorkspace from \"@/pages/TeamWorkspace\";\nimport TeamCollaborationWorkspace from \"@/pages/TeamCollaborationWorkspace\";\nimport Outputs from \"@/pages/Outputs\";\nimport Privacy from \"@/pages/Privacy\";\nimport Terms from \"@/pages/Terms\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nfunction DashboardLayout({ children }: { children: React.ReactNode }) {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <ThemeToggle />\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to access this page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/privacy\" component={Privacy} />\n          <Route path=\"/terms\" component={Terms} />\n          <Route component={Home} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={() => <DashboardLayout><Dashboard /></DashboardLayout>} />\n          <Route path=\"/privacy\" component={Privacy} />\n          <Route path=\"/terms\" component={Terms} />\n          \n          <Route path=\"/dashboard\">\n            <ProtectedRoute>\n              <DashboardLayout>\n                <Dashboard />\n              </DashboardLayout>\n            </ProtectedRoute>\n          </Route>\n          \n          <Route path=\"/bots\">\n            <ProtectedRoute>\n              <DashboardLayout>\n                <BotsManagement />\n              </DashboardLayout>\n            </ProtectedRoute>\n          </Route>\n          \n          <Route path=\"/bots/create\">\n            <ProtectedRoute>\n              <DashboardLayout>\n                <CreateBot />\n              </DashboardLayout>\n            </ProtectedRoute>\n          </Route>\n          \n          <Route path=\"/teams\">\n            <ProtectedRoute>\n              <DashboardLayout>\n                <TeamsManagement />\n              </DashboardLayout>\n            </ProtectedRoute>\n          </Route>\n          \n          <Route path=\"/teams/create\">\n            <ProtectedRoute>\n              <DashboardLayout>\n                <CreateTeam />\n              </DashboardLayout>\n            </ProtectedRoute>\n          </Route>\n          \n          <Route path=\"/teams/:id\">\n            <ProtectedRoute>\n              <DashboardLayout>\n                <TeamWorkspace />\n              </DashboardLayout>\n            </ProtectedRoute>\n          </Route>\n          \n          <Route path=\"/teams/:id/collaborate\">\n            <ProtectedRoute>\n              <DashboardLayout>\n                <TeamCollaborationWorkspace />\n              </DashboardLayout>\n            </ProtectedRoute>\n          </Route>\n          \n          <Route path=\"/outputs\">\n            <ProtectedRoute>\n              <DashboardLayout>\n                <Outputs />\n              </DashboardLayout>\n            </ProtectedRoute>\n          </Route>\n          \n          <Route path=\"/settings\">\n            <ProtectedRoute>\n              <DashboardLayout>\n                <Dashboard />\n              </DashboardLayout>\n            </ProtectedRoute>\n          </Route>\n          \n          <Route component={NotFound} />\n        </>\n      )}\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":5677},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const initialTheme = savedTheme || \"light\";\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      aria-label=\"Toggle theme\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1056},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/examples/NavHeader.tsx":{"content":"import { NavHeader } from '../NavHeader';\n\nexport default function NavHeaderExample() {\n  return <NavHeader />;\n}\n","size_bytes":114},"client/src/components/AppSidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Network, LayoutDashboard, Bot, Users, FileText, Settings, LogOut } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst menuItems = [\n  { title: \"Dashboard\", url: \"/dashboard\", icon: LayoutDashboard },\n  { title: \"My Bots\", url: \"/bots\", icon: Bot },\n  { title: \"Teams\", url: \"/teams\", icon: Users },\n  { title: \"Outputs\", url: \"/outputs\", icon: FileText },\n  { title: \"Settings\", url: \"/settings\", icon: Settings },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const getInitials = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user?.email) {\n      return user.email.slice(0, 2).toUpperCase();\n    }\n    return \"U\";\n  };\n\n  const getDisplayName = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    if (user?.email) {\n      return user.email.split('@')[0];\n    }\n    return \"User\";\n  };\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-6\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-8 h-8 rounded-lg bg-primary flex items-center justify-center\">\n            <Network className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <span className=\"font-bold text-xl\">AI Nexus</span>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <button className=\"flex items-center gap-3 w-full p-2 rounded-lg hover-elevate\" data-testid=\"button-user-menu\">\n              <Avatar className=\"h-8 w-8\">\n                {user?.profileImageUrl && <AvatarImage src={user.profileImageUrl} />}\n                <AvatarFallback>{getInitials()}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 text-left\">\n                <p className=\"text-sm font-medium\">{getDisplayName()}</p>\n                <p className=\"text-xs text-muted-foreground truncate\">{user?.email}</p>\n              </div>\n            </button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            <DropdownMenuItem asChild>\n              <Link href=\"/settings\" data-testid=\"menu-item-profile\">\n                <Settings className=\"mr-2 h-4 w-4\" />\n                Profile Settings\n              </Link>\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-item-logout\">\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Log Out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":4060},"client/src/components/SignupForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Link } from \"wouter\";\nimport { Network } from \"lucide-react\";\nimport { SiGoogle, SiGithub } from \"react-icons/si\";\n\nexport function SignupForm() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Signup submitted:\", { email, password, confirmPassword });\n  };\n\n  const handleGoogleSignup = () => {\n    console.log(\"Google signup clicked\");\n  };\n\n  const handleGithubSignup = () => {\n    console.log(\"GitHub signup clicked\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 bg-muted/30\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-12 h-12 rounded-lg bg-primary flex items-center justify-center\">\n              <Network className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-3xl\">Create an account</CardTitle>\n          <CardDescription>Start collaborating with AI teams today</CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Button\n              variant=\"outline\"\n              onClick={handleGoogleSignup}\n              data-testid=\"button-google-signup\"\n            >\n              <SiGoogle className=\"mr-2 h-4 w-4\" />\n              Google\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleGithubSignup}\n              data-testid=\"button-github-signup\"\n            >\n              <SiGithub className=\"mr-2 h-4 w-4\" />\n              GitHub\n            </Button>\n          </div>\n          \n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <Separator />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-card px-2 text-muted-foreground\">Or continue with</span>\n            </div>\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"name@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                data-testid=\"input-email\"\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                data-testid=\"input-password\"\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n              <Input\n                id=\"confirm-password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                data-testid=\"input-confirm-password\"\n                required\n              />\n            </div>\n            \n            <Button type=\"submit\" className=\"w-full\" data-testid=\"button-submit\">\n              Create Account\n            </Button>\n          </form>\n        </CardContent>\n        \n        <CardFooter className=\"flex flex-col space-y-2\">\n          <div className=\"text-sm text-center text-muted-foreground\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"text-primary hover:underline\" data-testid=\"link-login\">\n              Sign in\n            </Link>\n          </div>\n          <div className=\"text-sm text-center\">\n            <Link href=\"/\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-home\">\n              ← Back to home\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4817},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bot, Users, FileText, Plus, TrendingUp, Sparkles, ArrowRight } from \"lucide-react\";\nimport type { Bot as BotType, Team, Output } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n\n  // Fetch real data\n  const { data: bots = [] } = useQuery<BotType[]>({ queryKey: [\"/api/bots\"] });\n  const { data: teams = [] } = useQuery<Team[]>({ queryKey: [\"/api/teams\"] });\n  const { data: outputs = [] } = useQuery<Output[]>({ queryKey: [\"/api/outputs\"] });\n\n  const stats = [\n    {\n      title: \"Active Bots\",\n      value: bots.length,\n      description: \"AI models configured\",\n      icon: Bot,\n      trend: \"+12% from last month\",\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\"\n    },\n    {\n      title: \"Teams\",\n      value: teams.length,\n      description: \"Collaborative groups\",\n      icon: Users,\n      trend: \"+5 new this month\",\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\"\n    },\n    {\n      title: \"Outputs Generated\",\n      value: outputs.length,\n      description: \"Total completions\",\n      icon: FileText,\n      trend: `${outputs.length} saved`,\n      color: \"text-success\",\n      bgColor: \"bg-success/10\"\n    },\n    {\n      title: \"Productivity\",\n      value: \"94%\",\n      description: \"AI efficiency score\",\n      icon: TrendingUp,\n      trend: \"+8% this week\",\n      color: \"text-warning\",\n      bgColor: \"bg-warning/10\"\n    }\n  ];\n\n  const recentBots = bots.slice(0, 3);\n  const recentTeams = teams.slice(0, 3);\n  const recentOutputs = outputs.slice(0, 4);\n\n  return (\n    <div className=\"min-h-screen bg-muted/30\">\n      {/* Hero Section */}\n      <div className=\"border-b bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6 py-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 rounded-xl gradient-primary flex items-center justify-center shadow-sm\">\n                  <Sparkles className=\"h-6 w-6 text-primary-foreground\" />\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold tracking-tight\">AI Nexus Dashboard</h1>\n                  <p className=\"text-muted-foreground\">\n                    Orchestrate multi-model AI collaboration with precision and power\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex gap-3\">\n              <Button onClick={() => setLocation(\"/bots\")} size=\"lg\" className=\"gap-2 shadow-sm\" data-testid=\"button-create-bot-header\">\n                <Plus className=\"h-5 w-5\" />\n                New Bot\n              </Button>\n              <Button onClick={() => setLocation(\"/teams\")} size=\"lg\" variant=\"outline\" className=\"gap-2\" data-testid=\"button-create-team-header\">\n                <Plus className=\"h-5 w-5\" />\n                New Team\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-8\">\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {stats.map((stat) => {\n            const Icon = stat.icon;\n            return (\n              <Card key={stat.title} className=\"hover-elevate border-border/50\" data-testid={`stat-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                      {stat.title}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${stat.bgColor}`}>\n                      <Icon className={`h-4 w-4 ${stat.color}`} />\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-1\">\n                  <div className=\"text-3xl font-bold tracking-tight\">{stat.value}</div>\n                  <p className=\"text-xs text-muted-foreground\">{stat.description}</p>\n                  <p className=\"text-xs font-medium text-success\">{stat.trend}</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Main Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Recent Bots */}\n          <Card className=\"border-border/50\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <CardTitle className=\"text-xl flex items-center gap-2\">\n                    <Bot className=\"h-5 w-5 text-primary\" />\n                    Recent Bots\n                  </CardTitle>\n                  <CardDescription>Your latest AI assistants</CardDescription>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setLocation(\"/bots\")} className=\"gap-1\">\n                  View All\n                  <ArrowRight className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {recentBots.length === 0 ? (\n                <div className=\"text-center py-12 text-muted-foreground space-y-3\">\n                  <Bot className=\"h-12 w-12 mx-auto opacity-50\" />\n                  <p className=\"text-sm\">No bots created yet</p>\n                  <Button onClick={() => setLocation(\"/bots\")} size=\"sm\" className=\"gap-2\">\n                    <Plus className=\"h-3 w-3\" />\n                    Create Your First Bot\n                  </Button>\n                </div>\n              ) : (\n                recentBots.map((bot) => (\n                  <div\n                    key={bot.id}\n                    className=\"flex items-center gap-4 p-4 rounded-lg border border-border/50 hover-elevate cursor-pointer transition-all\"\n                    onClick={() => setLocation(\"/bots\")}\n                    data-testid={`bot-card-${bot.id}`}\n                  >\n                    <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                      <Bot className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-semibold text-sm truncate\">{bot.name}</h3>\n                      <p className=\"text-xs text-muted-foreground truncate\">{bot.role || \"AI Assistant\"}</p>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"flex-shrink-0 text-xs font-mono\">\n                      {bot.model.split('/').pop()?.split(':')[0] || bot.model}\n                    </Badge>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Active Teams */}\n          <Card className=\"border-border/50\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <CardTitle className=\"text-xl flex items-center gap-2\">\n                    <Users className=\"h-5 w-5 text-accent\" />\n                    Active Teams\n                  </CardTitle>\n                  <CardDescription>Collaborative AI groups</CardDescription>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setLocation(\"/teams\")} className=\"gap-1\">\n                  View All\n                  <ArrowRight className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {recentTeams.length === 0 ? (\n                <div className=\"text-center py-12 text-muted-foreground space-y-3\">\n                  <Users className=\"h-12 w-12 mx-auto opacity-50\" />\n                  <p className=\"text-sm\">No teams created yet</p>\n                  <Button onClick={() => setLocation(\"/teams\")} size=\"sm\" className=\"gap-2\">\n                    <Plus className=\"h-3 w-3\" />\n                    Create Your First Team\n                  </Button>\n                </div>\n              ) : (\n                recentTeams.map((team) => (\n                  <div\n                    key={team.id}\n                    className=\"flex items-center gap-4 p-4 rounded-lg border border-border/50 hover-elevate cursor-pointer transition-all\"\n                    onClick={() => setLocation(`/teams/${team.id}`)}\n                    data-testid={`team-card-${team.id}`}\n                  >\n                    <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-accent/10 flex items-center justify-center\">\n                      <Users className=\"h-5 w-5 text-accent\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-semibold text-sm truncate\">{team.name}</h3>\n                      <p className=\"text-xs text-muted-foreground truncate\">{team.description || \"AI team collaboration\"}</p>\n                    </div>\n                    <Badge variant=\"outline\" className=\"flex-shrink-0\">Active</Badge>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Outputs */}\n        <Card className=\"border-border/50\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <CardTitle className=\"text-xl flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5 text-success\" />\n                  Recent Outputs\n                </CardTitle>\n                <CardDescription>Latest AI-generated content</CardDescription>\n              </div>\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => setLocation(\"/outputs\")} className=\"gap-1\" data-testid=\"button-view-all-outputs\">\n                View All\n                <ArrowRight className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {recentOutputs.length === 0 ? (\n              <div className=\"text-center py-12 text-muted-foreground space-y-3\">\n                <FileText className=\"h-12 w-12 mx-auto opacity-50\" />\n                <p className=\"text-sm\">No outputs generated yet</p>\n                <p className=\"text-xs\">Create a team and submit a brief to get started</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {recentOutputs.map((output) => (\n                  <div\n                    key={output.id}\n                    className=\"p-4 rounded-lg border border-border/50 hover-elevate cursor-pointer transition-all space-y-3\"\n                    onClick={() => setLocation(\"/outputs\")}\n                    data-testid={`output-card-${output.id}`}\n                  >\n                    <div className=\"flex items-start justify-between gap-2\">\n                      <h3 className=\"font-semibold text-sm line-clamp-1\">{output.title}</h3>\n                      <Badge variant=\"secondary\" className=\"flex-shrink-0 text-xs\">Saved</Badge>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                      {output.combinedOutput?.substring(0, 150) || output.brief?.substring(0, 150) || \"No preview available\"}\n                    </p>\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                      <Users className=\"h-3 w-3\" />\n                      <span>Team collaboration</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions Banner */}\n        <Card className=\"gradient-primary text-primary-foreground border-0 overflow-hidden relative\">\n          <div className=\"absolute inset-0 opacity-10 bg-gradient-to-r from-transparent via-white to-transparent\" />\n          <CardContent className=\"py-8 relative\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-2\">\n                <h3 className=\"text-2xl font-bold\">Ready to collaborate with AI?</h3>\n                <p className=\"text-primary-foreground/90 max-w-xl\">\n                  Harness the power of multiple AI models working together. Create bots, build teams, and generate insights.\n                </p>\n              </div>\n              <div className=\"flex gap-3\">\n                <Button onClick={() => setLocation(\"/bots\")} size=\"lg\" variant=\"secondary\" className=\"gap-2\">\n                  <Plus className=\"h-4 w-4\" />\n                  Create Bot\n                </Button>\n                <Button onClick={() => setLocation(\"/teams\")} size=\"lg\" variant=\"outline\" className=\"gap-2 border-primary-foreground/20 hover:bg-primary-foreground/10 text-primary-foreground\">\n                  <Plus className=\"h-4 w-4\" />\n                  Build Team\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13628},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/BriefSubmission.tsx":{"content":"import { BriefSubmission } from '../BriefSubmission';\n\nexport default function BriefSubmissionExample() {\n  //todo: remove mock functionality\n  const mockMembers = [\n    { name: \"Writer\", model: \"GPT-4\" },\n    { name: \"Editor\", model: \"Claude\" },\n    { name: \"SEO Expert\", model: \"Gemini\" }\n  ];\n\n  return (\n    <BriefSubmission\n      teamName=\"Content Team\"\n      members={mockMembers}\n    />\n  );\n}\n","size_bytes":401},"client/src/components/examples/HowItWorksSection.tsx":{"content":"import { HowItWorksSection } from '../HowItWorksSection';\n\nexport default function HowItWorksSectionExample() {\n  return <HowItWorksSection />;\n}\n","size_bytes":146},"client/src/components/LoginForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Link } from \"wouter\";\nimport { Network } from \"lucide-react\";\nimport { SiGoogle, SiGithub } from \"react-icons/si\";\n\nexport function LoginForm() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Login submitted:\", { email, password });\n  };\n\n  const handleGoogleLogin = () => {\n    console.log(\"Google login clicked\");\n  };\n\n  const handleGithubLogin = () => {\n    console.log(\"GitHub login clicked\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 bg-muted/30\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-12 h-12 rounded-lg bg-primary flex items-center justify-center\">\n              <Network className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-3xl\">Welcome back</CardTitle>\n          <CardDescription>Sign in to your AI Nexus account</CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Button\n              variant=\"outline\"\n              onClick={handleGoogleLogin}\n              data-testid=\"button-google-login\"\n            >\n              <SiGoogle className=\"mr-2 h-4 w-4\" />\n              Google\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleGithubLogin}\n              data-testid=\"button-github-login\"\n            >\n              <SiGithub className=\"mr-2 h-4 w-4\" />\n              GitHub\n            </Button>\n          </div>\n          \n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <Separator />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-card px-2 text-muted-foreground\">Or continue with</span>\n            </div>\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"name@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                data-testid=\"input-email\"\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                data-testid=\"input-password\"\n                required\n              />\n            </div>\n            \n            <Button type=\"submit\" className=\"w-full\" data-testid=\"button-submit\">\n              Sign In\n            </Button>\n          </form>\n        </CardContent>\n        \n        <CardFooter className=\"flex flex-col space-y-2\">\n          <div className=\"text-sm text-center text-muted-foreground\">\n            Don't have an account?{\" \"}\n            <Link href=\"/signup\" className=\"text-primary hover:underline\" data-testid=\"link-signup\">\n              Sign up\n            </Link>\n          </div>\n          <div className=\"text-sm text-center\">\n            <Link href=\"/\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-home\">\n              ← Back to home\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4214},"client/src/components/CTASection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\n\nexport function CTASection() {\n  const handleGetStarted = () => {\n    console.log(\"CTA Get Started clicked\");\n    window.location.href = \"/login\";\n  };\n\n  return (\n    <section className=\"py-16 bg-primary/5\">\n      <div className=\"max-w-4xl mx-auto px-6 text-center\">\n        <h2 className=\"text-4xl font-bold mb-4\">\n          Ready to Transform Your AI Workflow?\n        </h2>\n        <p className=\"text-xl text-muted-foreground mb-8\">\n          Join teams already using AI Nexus to orchestrate multiple AI models for better results\n        </p>\n        <Button\n          size=\"lg\"\n          onClick={handleGetStarted}\n          data-testid=\"button-cta-get-started\"\n        >\n          Get Started Free\n          <ArrowRight className=\"ml-2 h-5 w-5\" />\n        </Button>\n      </div>\n    </section>\n  );\n}\n","size_bytes":900},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/OutputCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Copy, Trash2, RefreshCw } from \"lucide-react\";\n\ninterface OutputCardProps {\n  title: string;\n  timestamp: string;\n  teamName: string;\n  preview: string;\n  onCopy?: () => void;\n  onDelete?: () => void;\n  onIterate?: () => void;\n}\n\nexport function OutputCard({ title, timestamp, teamName, preview, onCopy, onDelete, onIterate }: OutputCardProps) {\n  const handleCopy = () => {\n    console.log(\"Copy output:\", title);\n    onCopy?.();\n  };\n\n  const handleDelete = () => {\n    console.log(\"Delete output:\", title);\n    onDelete?.();\n  };\n\n  const handleIterate = () => {\n    console.log(\"Iterate output:\", title);\n    onIterate?.();\n  };\n\n  return (\n    <Card className=\"hover-elevate\" data-testid=\"card-output\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold mb-1\" data-testid=\"text-title\">{title}</h3>\n            <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n              <Clock className=\"h-3 w-3\" />\n              <span data-testid=\"text-timestamp\">{timestamp}</span>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" data-testid=\"badge-team\">{teamName}</Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pb-3\">\n        <p className=\"text-sm text-muted-foreground line-clamp-3\" data-testid=\"text-preview\">\n          {preview}\n        </p>\n      </CardContent>\n      \n      <CardFooter className=\"pt-3 border-t gap-2 flex-wrap\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleCopy}\n          data-testid=\"button-copy\"\n        >\n          <Copy className=\"h-4 w-4 mr-1\" />\n          Copy\n        </Button>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleIterate}\n          data-testid=\"button-iterate\"\n        >\n          <RefreshCw className=\"h-4 w-4 mr-1\" />\n          Iterate\n        </Button>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleDelete}\n          data-testid=\"button-delete\"\n        >\n          <Trash2 className=\"h-4 w-4 mr-1\" />\n          Delete\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":2440},"client/src/components/examples/LoginForm.tsx":{"content":"import { LoginForm } from '../LoginForm';\n\nexport default function LoginFormExample() {\n  return <LoginForm />;\n}\n","size_bytes":114},"client/src/components/examples/DashboardStats.tsx":{"content":"import { DashboardStats } from '../DashboardStats';\n\nexport default function DashboardStatsExample() {\n  return <DashboardStats />;\n}\n","size_bytes":134},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertBotSchema, \n  updateBotSchema,\n  insertTeamSchema, \n  updateTeamSchema,\n  insertOutputSchema,\n  insertConversationSchema,\n  insertMessageSchema,\n  insertTeamSessionSchema,\n  updateTeamSessionSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { getFreeModels, executeTeamTasks, executeCollaborativeTeamTasks, isValidModel, createChatCompletion, type ChatMessage } from \"./openrouter\";\n\n// Extend Express Request type to include user\ndeclare global {\n  namespace Express {\n    interface User {\n      claims: {\n        sub: string;\n        email?: string;\n        first_name?: string;\n        last_name?: string;\n        profile_image_url?: string;\n        exp?: number;\n      };\n      access_token?: string;\n      refresh_token?: string;\n      expires_at?: number;\n    }\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  await setupAuth(app);\n\n  // Auth routes\n  app.get(\"/api/auth/user\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Bot routes\n  app.get(\"/api/bots\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const bots = await storage.getUserBots(userId);\n      \n      // Validate each bot's model if API key is available\n      if (process.env.OPENROUTER_API_KEY) {\n        const botsWithValidation = await Promise.all(\n          bots.map(async (bot) => {\n            const validationResult = await isValidModel(process.env.OPENROUTER_API_KEY!, bot.model);\n            return {\n              ...bot,\n              // Only set modelValid to false if we confirmed it's invalid\n              // If validationResult is null (unable to verify), don't include the field\n              ...(validationResult !== null && { modelValid: validationResult }),\n            };\n          })\n        );\n        return res.json(botsWithValidation);\n      }\n      \n      res.json(bots);\n    } catch (error) {\n      console.error(\"Error fetching bots:\", error);\n      res.status(500).json({ message: \"Failed to fetch bots\" });\n    }\n  });\n\n  app.get(\"/api/bots/:id\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const bot = await storage.getBot(req.params.id);\n      if (!bot) {\n        return res.status(404).json({ message: \"Bot not found\" });\n      }\n      \n      // Verify ownership\n      if (bot.userId !== req.user!.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      res.json(bot);\n    } catch (error) {\n      console.error(\"Error fetching bot:\", error);\n      res.status(500).json({ message: \"Failed to fetch bot\" });\n    }\n  });\n\n  app.post(\"/api/bots\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const botData = insertBotSchema.parse({ ...req.body, userId });\n      const bot = await storage.createBot(botData);\n      res.status(201).json(bot);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid bot data\", errors: error.errors });\n      }\n      console.error(\"Error creating bot:\", error);\n      res.status(500).json({ message: \"Failed to create bot\" });\n    }\n  });\n\n  app.patch(\"/api/bots/:id\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const bot = await storage.getBot(req.params.id);\n      if (!bot) {\n        return res.status(404).json({ message: \"Bot not found\" });\n      }\n      \n      // Verify ownership\n      if (bot.userId !== req.user!.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      // Validate and sanitize update data\n      const updateData = updateBotSchema.parse(req.body);\n      const updatedBot = await storage.updateBot(req.params.id, updateData);\n      res.json(updatedBot);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid bot data\", errors: error.errors });\n      }\n      console.error(\"Error updating bot:\", error);\n      res.status(500).json({ message: \"Failed to update bot\" });\n    }\n  });\n\n  app.delete(\"/api/bots/:id\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const bot = await storage.getBot(req.params.id);\n      if (!bot) {\n        return res.status(404).json({ message: \"Bot not found\" });\n      }\n      \n      // Verify ownership\n      if (bot.userId !== req.user!.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      await storage.deleteBot(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting bot:\", error);\n      res.status(500).json({ message: \"Failed to delete bot\" });\n    }\n  });\n\n  // Team routes\n  app.get(\"/api/teams\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const teams = await storage.getUserTeams(userId);\n      res.json(teams);\n    } catch (error) {\n      console.error(\"Error fetching teams:\", error);\n      res.status(500).json({ message: \"Failed to fetch teams\" });\n    }\n  });\n\n  app.get(\"/api/teams/:id\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const team = await storage.getTeam(req.params.id);\n      if (!team) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      \n      // Verify ownership\n      if (team.userId !== req.user!.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const teamBots = await storage.getTeamBots(team.id);\n      res.json({ ...team, bots: teamBots });\n    } catch (error) {\n      console.error(\"Error fetching team:\", error);\n      res.status(500).json({ message: \"Failed to fetch team\" });\n    }\n  });\n\n  app.post(\"/api/teams\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { botIds, ...teamData } = req.body;\n      \n      const team = await storage.createTeam(\n        insertTeamSchema.parse({ ...teamData, userId })\n      );\n      \n      // Add team members\n      if (Array.isArray(botIds)) {\n        for (const botId of botIds) {\n          await storage.addTeamMember({ teamId: team.id, botId });\n        }\n      }\n      \n      res.status(201).json(team);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid team data\", errors: error.errors });\n      }\n      console.error(\"Error creating team:\", error);\n      res.status(500).json({ message: \"Failed to create team\" });\n    }\n  });\n\n  app.patch(\"/api/teams/:id\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const team = await storage.getTeam(req.params.id);\n      if (!team) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      \n      // Verify ownership\n      if (team.userId !== req.user!.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      // Validate and sanitize update data\n      const updateData = updateTeamSchema.parse(req.body);\n      const updatedTeam = await storage.updateTeam(req.params.id, updateData);\n      res.json(updatedTeam);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid team data\", errors: error.errors });\n      }\n      console.error(\"Error updating team:\", error);\n      res.status(500).json({ message: \"Failed to update team\" });\n    }\n  });\n\n  app.delete(\"/api/teams/:id\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const team = await storage.getTeam(req.params.id);\n      if (!team) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      \n      // Verify ownership\n      if (team.userId !== req.user!.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      await storage.deleteTeam(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting team:\", error);\n      res.status(500).json({ message: \"Failed to delete team\" });\n    }\n  });\n\n  app.get(\"/api/teams/:id/bots\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const team = await storage.getTeam(req.params.id);\n      if (!team) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      \n      // Verify ownership\n      if (team.userId !== req.user!.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const teamBots = await storage.getTeamBots(req.params.id);\n      res.json(teamBots);\n    } catch (error) {\n      console.error(\"Error fetching team bots:\", error);\n      res.status(500).json({ message: \"Failed to fetch team bots\" });\n    }\n  });\n\n  // Output routes\n  app.get(\"/api/outputs\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const outputs = await storage.getUserOutputs(userId);\n      res.json(outputs);\n    } catch (error) {\n      console.error(\"Error fetching outputs:\", error);\n      res.status(500).json({ message: \"Failed to fetch outputs\" });\n    }\n  });\n\n  app.post(\"/api/outputs\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const output = await storage.createOutput(\n        insertOutputSchema.parse({ ...req.body, userId })\n      );\n      res.status(201).json(output);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid output data\", errors: error.errors });\n      }\n      console.error(\"Error creating output:\", error);\n      res.status(500).json({ message: \"Failed to create output\" });\n    }\n  });\n\n  app.delete(\"/api/outputs/:id\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const output = await storage.getOutput(req.params.id);\n      if (!output) {\n        return res.status(404).json({ message: \"Output not found\" });\n      }\n      \n      // Verify ownership\n      if (output.userId !== req.user!.claims.sub) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      await storage.deleteOutput(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting output:\", error);\n      res.status(500).json({ message: \"Failed to delete output\" });\n    }\n  });\n\n  // OpenRouter routes\n  app.get(\"/api/openrouter/models\", isAuthenticated, async (_req: Request, res) => {\n    try {\n      if (!process.env.OPENROUTER_API_KEY) {\n        return res.status(500).json({ message: \"OpenRouter API key not configured\" });\n      }\n      \n      const freeModels = await getFreeModels(process.env.OPENROUTER_API_KEY);\n      res.json(freeModels);\n    } catch (error) {\n      console.error(\"Error fetching models:\", error);\n      res.status(500).json({ message: \"Failed to fetch models\" });\n    }\n  });\n\n  app.post(\"/api/openrouter/execute\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { teamId, brief, delegations } = req.body;\n\n      if (!process.env.OPENROUTER_API_KEY) {\n        return res.status(500).json({ message: \"OpenRouter API key not configured\" });\n      }\n\n      // Get team and verify ownership\n      const team = await storage.getTeam(teamId);\n      if (!team || team.userId !== userId) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n\n      // Get all bots in the team\n      const teamBots = await storage.getTeamBots(teamId);\n      \n      // Prepare delegation data with bot details\n      const delegationsWithBotData = delegations.map((delegation: any) => {\n        const bot = teamBots.find(b => b.id === delegation.botId);\n        if (!bot) throw new Error(`Bot ${delegation.botId} not found in team`);\n        \n        return {\n          botId: bot.id,\n          botName: bot.name,\n          model: bot.model,\n          systemPrompt: bot.systemPrompt || \"\",\n          task: delegation.task,\n          temperature: parseFloat(bot.temperature || \"0.7\"),\n          maxTokens: bot.maxTokens || 1000,\n        };\n      });\n\n      // Execute all tasks collaboratively (sequential, each bot sees previous outputs)\n      const responses = await executeCollaborativeTeamTasks(\n        process.env.OPENROUTER_API_KEY,\n        brief,\n        delegationsWithBotData\n      );\n\n      res.json({ responses });\n    } catch (error) {\n      console.error(\"Error executing team tasks:\", error);\n      res.status(500).json({ message: \"Failed to execute team tasks\", error: String(error) });\n    }\n  });\n\n  // Chat with individual bot\n  app.post(\"/api/bots/:botId/chat\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { botId } = req.params;\n      const { message, conversationId } = req.body;\n\n      if (!process.env.OPENROUTER_API_KEY) {\n        return res.status(500).json({ message: \"OpenRouter API key not configured\" });\n      }\n\n      // Get bot and verify ownership\n      const bot = await storage.getBot(botId);\n      if (!bot || bot.userId !== userId) {\n        return res.status(404).json({ message: \"Bot not found\" });\n      }\n\n      // Get or create conversation\n      let conversation;\n      if (conversationId) {\n        conversation = await storage.getConversation(conversationId);\n        if (!conversation || conversation.userId !== userId) {\n          return res.status(404).json({ message: \"Conversation not found\" });\n        }\n      } else {\n        conversation = await storage.createConversation({\n          userId,\n          botId,\n          teamId: null,\n          title: `Chat with ${bot.name}`,\n        });\n      }\n\n      // Save user message\n      await storage.createMessage({\n        conversationId: conversation.id,\n        role: \"user\",\n        content: message,\n        botId: null,\n      });\n\n      // Get conversation history\n      const history = await storage.getConversationMessages(conversation.id);\n\n      // Build messages for API call\n      const messages: ChatMessage[] = [];\n      \n      if (bot.systemPrompt) {\n        messages.push({\n          role: \"system\",\n          content: bot.systemPrompt,\n        });\n      }\n\n      messages.push(...history.map(msg => ({\n        role: msg.role as \"user\" | \"assistant\" | \"system\",\n        content: msg.content,\n      })));\n\n      // Call OpenRouter API\n      let response;\n      try {\n        response = await createChatCompletion(process.env.OPENROUTER_API_KEY, {\n          model: bot.model,\n          messages,\n          temperature: parseFloat(bot.temperature || \"0.7\"),\n          max_tokens: bot.maxTokens || 1000,\n        });\n      } catch (apiError: any) {\n        // Handle model-specific errors\n        const errorMsg = String(apiError);\n        if (errorMsg.includes(\"model not found\") || errorMsg.includes(\"404\")) {\n          return res.status(400).json({ \n            message: `The AI model \"${bot.model}\" is currently unavailable. Please try selecting a different model for this bot.`,\n            modelError: true \n          });\n        }\n        throw apiError; // Re-throw other errors\n      }\n\n      const assistantMessage = response.choices[0]?.message?.content || \"No response\";\n\n      // Save assistant message\n      await storage.createMessage({\n        conversationId: conversation.id,\n        role: \"assistant\",\n        content: assistantMessage,\n        botId: bot.id,\n      });\n\n      // Get updated conversation messages\n      const updatedMessages = await storage.getConversationMessages(conversation.id);\n\n      res.json({\n        conversationId: conversation.id,\n        messages: updatedMessages,\n      });\n    } catch (error) {\n      console.error(\"Error in bot chat:\", error);\n      res.status(500).json({ message: \"Failed to process chat\", error: String(error) });\n    }\n  });\n\n  // Chat with team (all bots respond)\n  app.post(\"/api/teams/:teamId/chat\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { teamId } = req.params;\n      const { message, conversationId } = req.body;\n\n      if (!process.env.OPENROUTER_API_KEY) {\n        return res.status(500).json({ message: \"OpenRouter API key not configured\" });\n      }\n\n      // Get team and verify ownership\n      const team = await storage.getTeam(teamId);\n      if (!team || team.userId !== userId) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n\n      // Get team bots\n      const teamBots = await storage.getTeamBots(teamId);\n      if (teamBots.length === 0) {\n        return res.status(400).json({ message: \"Team has no bots\" });\n      }\n\n      // Get or create conversation\n      let conversation;\n      if (conversationId) {\n        conversation = await storage.getConversation(conversationId);\n        if (!conversation || conversation.userId !== userId) {\n          return res.status(404).json({ message: \"Conversation not found\" });\n        }\n      } else {\n        conversation = await storage.createConversation({\n          userId,\n          botId: null,\n          teamId,\n          title: `Team Chat: ${team.name}`,\n        });\n      }\n\n      // Save user message\n      await storage.createMessage({\n        conversationId: conversation.id,\n        role: \"user\",\n        content: message,\n        botId: null,\n      });\n\n      // Get conversation history (user messages only for context)\n      const history = await storage.getConversationMessages(conversation.id);\n\n      // Process each bot in parallel\n      const botResponses = await Promise.allSettled(\n        teamBots.map(async (bot) => {\n          const messages: ChatMessage[] = [];\n          \n          if (bot.systemPrompt) {\n            messages.push({\n              role: \"system\",\n              content: bot.systemPrompt,\n            });\n          }\n\n          // Add recent history for context\n          messages.push(...history.map(msg => ({\n            role: msg.role as \"user\" | \"assistant\" | \"system\",\n            content: msg.content,\n          })));\n\n          try {\n            const response = await createChatCompletion(process.env.OPENROUTER_API_KEY!, {\n              model: bot.model,\n              messages,\n              temperature: parseFloat(bot.temperature || \"0.7\"),\n              max_tokens: bot.maxTokens || 1000,\n            });\n\n            const assistantMessage = response.choices[0]?.message?.content || \"No response\";\n\n            // Save this bot's response\n            await storage.createMessage({\n              conversationId: conversation.id,\n              role: \"assistant\",\n              content: `[${bot.name}]: ${assistantMessage}`,\n              botId: bot.id,\n            });\n\n            return {\n              botId: bot.id,\n              botName: bot.name,\n              message: assistantMessage,\n            };\n          } catch (apiError: any) {\n            // Handle model errors gracefully in team context\n            const errorMsg = String(apiError);\n            let errorMessage = \"Failed to get response\";\n            \n            if (errorMsg.includes(\"model not found\") || errorMsg.includes(\"404\")) {\n              errorMessage = `Model \"${bot.model}\" is currently unavailable. Please update this bot with a working model.`;\n            }\n\n            // Save error message so user can see which bot failed\n            await storage.createMessage({\n              conversationId: conversation.id,\n              role: \"assistant\",\n              content: `[${bot.name}]: ⚠️ ${errorMessage}`,\n              botId: bot.id,\n            });\n\n            return {\n              botId: bot.id,\n              botName: bot.name,\n              message: `⚠️ ${errorMessage}`,\n              error: true,\n            };\n          }\n        })\n      );\n\n      // Get updated conversation messages\n      const updatedMessages = await storage.getConversationMessages(conversation.id);\n\n      res.json({\n        conversationId: conversation.id,\n        messages: updatedMessages,\n        botResponses: botResponses.map((result, index) => {\n          if (result.status === \"fulfilled\") {\n            return result.value;\n          } else {\n            return {\n              botId: teamBots[index].id,\n              botName: teamBots[index].name,\n              error: result.reason?.message || \"Unknown error\",\n            };\n          }\n        }),\n      });\n    } catch (error) {\n      console.error(\"Error in team chat:\", error);\n      res.status(500).json({ message: \"Failed to process team chat\", error: String(error) });\n    }\n  });\n\n  // Get conversation messages\n  app.get(\"/api/conversations/:conversationId/messages\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { conversationId } = req.params;\n\n      const conversation = await storage.getConversation(conversationId);\n      if (!conversation || conversation.userId !== userId) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n\n      const messages = await storage.getConversationMessages(conversationId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Get user's conversations\n  app.get(\"/api/conversations\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { botId, teamId } = req.query;\n\n      let conversations;\n      if (botId) {\n        conversations = await storage.getBotConversations(botId as string);\n        // Filter by userId to ensure security\n        conversations = conversations.filter(c => c.userId === userId);\n      } else if (teamId) {\n        conversations = await storage.getTeamConversations(teamId as string);\n        // Filter by userId to ensure security\n        conversations = conversations.filter(c => c.userId === userId);\n      } else {\n        conversations = await storage.getUserConversations(userId);\n      }\n\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  // Team Sessions routes (collaborative workflow)\n  \n  // Create a new collaborative session\n  app.post(\"/api/team-sessions\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const data = insertTeamSessionSchema.parse({ ...req.body, userId });\n      \n      const session = await storage.createTeamSession(data);\n      \n      res.status(201).json(session);\n    } catch (error) {\n      console.error(\"Error creating team session:\", error);\n      res.status(500).json({ message: \"Failed to create team session\" });\n    }\n  });\n\n  // Get all sessions for a team\n  app.get(\"/api/teams/:teamId/sessions\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { teamId } = req.params;\n      \n      const sessions = await storage.getTeamSessions(teamId);\n      // Filter by userId for security\n      const userSessions = sessions.filter(s => s.userId === userId);\n      \n      res.json(userSessions);\n    } catch (error) {\n      console.error(\"Error fetching team sessions:\", error);\n      res.status(500).json({ message: \"Failed to fetch team sessions\" });\n    }\n  });\n\n  // Get a specific session\n  app.get(\"/api/team-sessions/:id\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { id } = req.params;\n      \n      const session = await storage.getTeamSession(id);\n      \n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n      \n      if (session.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(session);\n    } catch (error) {\n      console.error(\"Error fetching team session:\", error);\n      res.status(500).json({ message: \"Failed to fetch team session\" });\n    }\n  });\n\n  // Update session (add planning message, update phase, etc.)\n  app.patch(\"/api/team-sessions/:id\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { id } = req.params;\n      \n      const session = await storage.getTeamSession(id);\n      \n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n      \n      if (session.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const data = updateTeamSessionSchema.parse(req.body);\n      const updated = await storage.updateTeamSession(id, data);\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating team session:\", error);\n      res.status(500).json({ message: \"Failed to update team session\" });\n    }\n  });\n\n  // Delete a session\n  app.delete(\"/api/team-sessions/:id\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { id } = req.params;\n      \n      const session = await storage.getTeamSession(id);\n      \n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n      \n      if (session.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      await storage.deleteTeamSession(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting team session:\", error);\n      res.status(500).json({ message: \"Failed to delete team session\" });\n    }\n  });\n\n  // Add a planning message (bot or user speaks during planning phase)\n  app.post(\"/api/team-sessions/:id/planning-message\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { id } = req.params;\n      const { content, speaker, botId, botName } = req.body;\n      \n      const session = await storage.getTeamSession(id);\n      \n      if (!session || session.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      if (session.phase !== \"planning\") {\n        return res.status(400).json({ message: \"Session not in planning phase\" });\n      }\n      \n      const message = {\n        speaker,\n        botId,\n        botName,\n        content,\n        timestamp: new Date().toISOString(),\n      };\n      \n      const planningMessages = [...(session.planningMessages as any[] || []), message];\n      \n      const updated = await storage.updateTeamSession(id, { planningMessages });\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error adding planning message:\", error);\n      res.status(500).json({ message: \"Failed to add planning message\" });\n    }\n  });\n\n  // Add a review message (bot or user speaks during review phase)\n  app.post(\"/api/team-sessions/:id/review-message\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { id } = req.params;\n      const { content, speaker, botId, botName } = req.body;\n      \n      const session = await storage.getTeamSession(id);\n      \n      if (!session || session.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      if (session.phase !== \"review\") {\n        return res.status(400).json({ message: \"Session not in review phase\" });\n      }\n      \n      const message = {\n        speaker,\n        botId,\n        botName,\n        content,\n        timestamp: new Date().toISOString(),\n      };\n      \n      const reviewMessages = [...(session.reviewMessages as any[] || []), message];\n      \n      const updated = await storage.updateTeamSession(id, { reviewMessages });\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error adding review message:\", error);\n      res.status(500).json({ message: \"Failed to add review message\" });\n    }\n  });\n\n  // Bot asks a question during planning\n  app.post(\"/api/team-sessions/:id/planning/bot-question\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { id } = req.params;\n      const { botId, question } = req.body;\n      \n      const session = await storage.getTeamSession(id);\n      \n      if (!session || session.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      // Get bot info\n      const teamBots = await storage.getTeamBots(session.teamId);\n      const bot = teamBots.find(b => b.id === botId);\n      \n      if (!bot) {\n        return res.status(404).json({ message: \"Bot not found\" });\n      }\n      \n      // Generate bot's question using OpenRouter\n      const messages: ChatMessage[] = [\n        {\n          role: \"system\",\n          content: bot.systemPrompt || `You are ${bot.name}, a helpful AI assistant working on a team project.`,\n        },\n        {\n          role: \"user\",\n          content: `PROJECT BRIEF:\\n${session.brief}\\n\\nYou are part of a team working on this project. Based on the brief, what clarifying questions do you have? Ask 1-2 specific questions that will help you understand your role and what's expected. Keep it concise.`,\n        },\n      ];\n      \n      let botQuestion: string;\n      \n      try {\n        const response = await createChatCompletion(process.env.OPENROUTER_API_KEY!, {\n          model: bot.model,\n          messages,\n          temperature: Number(bot.temperature) || 0.7,\n          max_tokens: 200,\n        });\n        \n        console.log(\"OpenRouter response for bot question:\", JSON.stringify(response, null, 2));\n        \n        botQuestion = response?.choices?.[0]?.message?.content?.trim() || \"\";\n        \n        if (!botQuestion) {\n          console.warn(\"No content in OpenRouter response, using fallback\");\n          botQuestion = `As ${bot.name}, I'd like to know more about the specific requirements and expectations for my role in this project.`;\n        }\n      } catch (apiError) {\n        console.error(\"OpenRouter API error for bot question:\", apiError);\n        botQuestion = `As ${bot.name}, I'd like to know more about the specific requirements and expectations for my role in this project.`;\n      }\n      \n      console.log(\"Final bot question:\", botQuestion);\n      \n      // Add to planning messages\n      const message = {\n        speaker: \"bot\",\n        botId: bot.id,\n        botName: bot.name,\n        content: botQuestion,\n        timestamp: new Date().toISOString(),\n      };\n      \n      console.log(\"Message to save:\", JSON.stringify(message, null, 2));\n      \n      const planningMessages = [...(session.planningMessages as any[] || []), message];\n      const updated = await storage.updateTeamSession(id, { planningMessages });\n      \n      res.json({ session: updated, question: botQuestion });\n    } catch (error) {\n      console.error(\"Error generating bot question:\", error);\n      res.status(500).json({ message: \"Failed to generate bot question\" });\n    }\n  });\n\n  // Finalize planning and move to execution\n  app.post(\"/api/team-sessions/:id/finalize-planning\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { id } = req.params;\n      const { taskAssignments } = req.body; // Array of {botId, botName, task}\n      \n      const session = await storage.getTeamSession(id);\n      \n      if (!session || session.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      if (session.phase !== \"planning\") {\n        return res.status(400).json({ message: \"Session not in planning phase\" });\n      }\n      \n      const updated = await storage.updateTeamSession(id, {\n        taskAssignments,\n        phase: \"execution\",\n      });\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error finalizing planning:\", error);\n      res.status(500).json({ message: \"Failed to finalize planning\" });\n    }\n  });\n\n  // Execute tasks (execution phase)\n  app.post(\"/api/team-sessions/:id/execute\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { id } = req.params;\n      \n      const session = await storage.getTeamSession(id);\n      \n      if (!session || session.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      if (session.phase !== \"execution\") {\n        return res.status(400).json({ message: \"Session not in execution phase\" });\n      }\n      \n      const taskAssignments = session.taskAssignments as any[] || [];\n      \n      if (taskAssignments.length === 0) {\n        return res.status(400).json({ message: \"No task assignments found\" });\n      }\n      \n      // Get bot details for execution\n      const teamBots = await storage.getTeamBots(session.teamId);\n      const delegationsWithBotData = taskAssignments.map(assignment => {\n        const bot = teamBots.find(b => b.id === assignment.botId);\n        if (!bot) throw new Error(`Bot ${assignment.botId} not found`);\n        \n        return {\n          botId: bot.id,\n          botName: bot.name,\n          model: bot.model,\n          systemPrompt: bot.systemPrompt || \"\",\n          task: assignment.task,\n          temperature: Number(bot.temperature) || 0.7,\n          maxTokens: bot.maxTokens || 1000,\n        };\n      });\n      \n      // Execute collaboratively\n      const responses = await executeCollaborativeTeamTasks(\n        process.env.OPENROUTER_API_KEY!,\n        session.brief,\n        delegationsWithBotData\n      );\n      \n      // Update session with outputs and move to review phase\n      const updated = await storage.updateTeamSession(id, {\n        executionOutputs: responses,\n        phase: \"review\",\n      });\n      \n      res.json({ session: updated, responses });\n    } catch (error) {\n      console.error(\"Error executing tasks:\", error);\n      res.status(500).json({ message: \"Failed to execute tasks\" });\n    }\n  });\n\n  // Add a suggestion during review phase\n  app.post(\"/api/team-sessions/:id/suggestion\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { id } = req.params;\n      const { botId, botName, type, target, content } = req.body;\n      \n      const session = await storage.getTeamSession(id);\n      \n      if (!session || session.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      if (session.phase !== \"review\") {\n        return res.status(400).json({ message: \"Session not in review phase\" });\n      }\n      \n      const suggestion = {\n        id: `sugg_${Date.now()}`,\n        botId,\n        botName,\n        type, // 'iteration' or 'critique'\n        target, // Which bot's work is being critiqued\n        content,\n        status: \"pending\",\n        timestamp: new Date().toISOString(),\n      };\n      \n      const suggestions = [...(session.suggestions as any[] || []), suggestion];\n      const updated = await storage.updateTeamSession(id, { suggestions });\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error adding suggestion:\", error);\n      res.status(500).json({ message: \"Failed to add suggestion\" });\n    }\n  });\n\n  // Approve/reject a suggestion\n  app.patch(\"/api/team-sessions/:id/suggestion/:suggestionId\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { id, suggestionId } = req.params;\n      const { status } = req.body; // 'approved' or 'rejected'\n      \n      const session = await storage.getTeamSession(id);\n      \n      if (!session || session.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const suggestions = (session.suggestions as any[] || []).map(s =>\n        s.id === suggestionId ? { ...s, status } : s\n      );\n      \n      const updated = await storage.updateTeamSession(id, { suggestions });\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating suggestion:\", error);\n      res.status(500).json({ message: \"Failed to update suggestion\" });\n    }\n  });\n\n  // Complete the session\n  app.post(\"/api/team-sessions/:id/complete\", isAuthenticated, async (req: Request, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { id } = req.params;\n      \n      const session = await storage.getTeamSession(id);\n      \n      if (!session || session.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const updated = await storage.updateTeamSession(id, { phase: \"completed\" });\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error completing session:\", error);\n      res.status(500).json({ message: \"Failed to complete session\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":37594},"client/src/components/FeaturesSection.tsx":{"content":"import { Bot, Users, Layout, Zap } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\n\nconst features = [\n  {\n    icon: Bot,\n    title: \"Create AI Bots\",\n    description: \"Configure individual AI bots with specific roles and purposes. Choose from multiple models and customize their behavior.\"\n  },\n  {\n    icon: Users,\n    title: \"Build Teams\",\n    description: \"Combine multiple AI bots into collaborative teams. Each bot contributes its unique perspective to solve complex problems.\"\n  },\n  {\n    icon: Layout,\n    title: \"Multi-View Outputs\",\n    description: \"Review responses in unified, individual, or comparison views. See how each bot contributes to the final solution.\"\n  },\n  {\n    icon: Zap,\n    title: \"Iterate & Refine\",\n    description: \"Follow up with individual bots or the entire team. Save outputs, iterate on ideas, and refine results in real-time.\"\n  }\n];\n\nexport function FeaturesSection() {\n  return (\n    <section id=\"features\" className=\"py-12 sm:py-24 bg-muted/30\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6\">\n        <div className=\"text-center mb-10 sm:mb-16\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold mb-3 sm:mb-4\">Powerful Features for AI Collaboration</h2>\n          <p className=\"text-base sm:text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Everything you need to orchestrate multiple AI models working together seamlessly\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {features.map((feature, index) => (\n            <Card\n              key={index}\n              className=\"p-6 hover-elevate transition-all duration-200\"\n              data-testid={`card-feature-${index}`}\n            >\n              <div className=\"mb-4\">\n                <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                  <feature.icon className=\"h-6 w-6 text-primary\" />\n                </div>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">{feature.title}</h3>\n              <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                {feature.description}\n              </p>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2302},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/storage.ts":{"content":"import {\n  users,\n  bots,\n  teams,\n  teamMembers,\n  outputs,\n  conversations,\n  messages,\n  teamSessions,\n  type User,\n  type UpsertUser,\n  type Bot,\n  type InsertBot,\n  type Team,\n  type InsertTeam,\n  type InsertTeamMember,\n  type Output,\n  type InsertOutput,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n  type TeamSession,\n  type InsertTeamSession,\n  type UpdateTeamSession,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Bot operations\n  createBot(bot: InsertBot): Promise<Bot>;\n  getBot(id: string): Promise<Bot | undefined>;\n  getUserBots(userId: string): Promise<Bot[]>;\n  updateBot(id: string, bot: Partial<InsertBot>): Promise<Bot | undefined>;\n  deleteBot(id: string): Promise<void>;\n\n  // Team operations\n  createTeam(team: InsertTeam): Promise<Team>;\n  getTeam(id: string): Promise<Team | undefined>;\n  getUserTeams(userId: string): Promise<Team[]>;\n  updateTeam(id: string, team: Partial<InsertTeam>): Promise<Team | undefined>;\n  deleteTeam(id: string): Promise<void>;\n\n  // Team member operations\n  addTeamMember(teamMember: InsertTeamMember): Promise<void>;\n  getTeamBots(teamId: string): Promise<Bot[]>;\n  removeTeamMember(teamId: string, botId: string): Promise<void>;\n\n  // Output operations\n  createOutput(output: InsertOutput): Promise<Output>;\n  getOutput(id: string): Promise<Output | undefined>;\n  getUserOutputs(userId: string): Promise<Output[]>;\n  deleteOutput(id: string): Promise<void>;\n\n  // Conversation operations\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  getConversation(id: string): Promise<Conversation | undefined>;\n  getUserConversations(userId: string): Promise<Conversation[]>;\n  getBotConversations(botId: string): Promise<Conversation[]>;\n  getTeamConversations(teamId: string): Promise<Conversation[]>;\n  deleteConversation(id: string): Promise<void>;\n\n  // Message operations\n  createMessage(message: InsertMessage): Promise<Message>;\n  getConversationMessages(conversationId: string): Promise<Message[]>;\n\n  // Team Session operations\n  createTeamSession(session: InsertTeamSession): Promise<TeamSession>;\n  getTeamSession(id: string): Promise<TeamSession | undefined>;\n  getTeamSessions(teamId: string): Promise<TeamSession[]>;\n  updateTeamSession(id: string, updates: UpdateTeamSession): Promise<TeamSession | undefined>;\n  deleteTeamSession(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Bot operations\n  async createBot(botData: InsertBot): Promise<Bot> {\n    const [bot] = await db.insert(bots).values(botData).returning();\n    return bot;\n  }\n\n  async getBot(id: string): Promise<Bot | undefined> {\n    const [bot] = await db.select().from(bots).where(eq(bots.id, id));\n    return bot;\n  }\n\n  async getUserBots(userId: string): Promise<Bot[]> {\n    return await db\n      .select()\n      .from(bots)\n      .where(eq(bots.userId, userId))\n      .orderBy(desc(bots.createdAt));\n  }\n\n  async updateBot(id: string, botData: Partial<InsertBot>): Promise<Bot | undefined> {\n    const [bot] = await db\n      .update(bots)\n      .set({ ...botData, updatedAt: new Date() })\n      .where(eq(bots.id, id))\n      .returning();\n    return bot;\n  }\n\n  async deleteBot(id: string): Promise<void> {\n    await db.delete(bots).where(eq(bots.id, id));\n  }\n\n  // Team operations\n  async createTeam(teamData: InsertTeam): Promise<Team> {\n    const [team] = await db.insert(teams).values(teamData).returning();\n    return team;\n  }\n\n  async getTeam(id: string): Promise<Team | undefined> {\n    const [team] = await db.select().from(teams).where(eq(teams.id, id));\n    return team;\n  }\n\n  async getUserTeams(userId: string): Promise<Team[]> {\n    return await db\n      .select()\n      .from(teams)\n      .where(eq(teams.userId, userId))\n      .orderBy(desc(teams.createdAt));\n  }\n\n  async updateTeam(id: string, teamData: Partial<InsertTeam>): Promise<Team | undefined> {\n    const [team] = await db\n      .update(teams)\n      .set({ ...teamData, updatedAt: new Date() })\n      .where(eq(teams.id, id))\n      .returning();\n    return team;\n  }\n\n  async deleteTeam(id: string): Promise<void> {\n    await db.delete(teams).where(eq(teams.id, id));\n  }\n\n  // Team member operations\n  async addTeamMember(teamMemberData: InsertTeamMember): Promise<void> {\n    await db.insert(teamMembers).values(teamMemberData);\n  }\n\n  async getTeamBots(teamId: string): Promise<Bot[]> {\n    const result = await db\n      .select({\n        bot: bots,\n      })\n      .from(teamMembers)\n      .innerJoin(bots, eq(teamMembers.botId, bots.id))\n      .where(eq(teamMembers.teamId, teamId));\n    \n    return result.map(r => r.bot);\n  }\n\n  async removeTeamMember(teamId: string, botId: string): Promise<void> {\n    await db\n      .delete(teamMembers)\n      .where(and(eq(teamMembers.teamId, teamId), eq(teamMembers.botId, botId)));\n  }\n\n  // Output operations\n  async createOutput(outputData: InsertOutput): Promise<Output> {\n    const [output] = await db.insert(outputs).values(outputData).returning();\n    return output;\n  }\n\n  async getOutput(id: string): Promise<Output | undefined> {\n    const [output] = await db.select().from(outputs).where(eq(outputs.id, id));\n    return output;\n  }\n\n  async getUserOutputs(userId: string): Promise<Output[]> {\n    return await db\n      .select()\n      .from(outputs)\n      .where(eq(outputs.userId, userId))\n      .orderBy(desc(outputs.createdAt));\n  }\n\n  async deleteOutput(id: string): Promise<void> {\n    await db.delete(outputs).where(eq(outputs.id, id));\n  }\n\n  // Conversation operations\n  async createConversation(conversationData: InsertConversation): Promise<Conversation> {\n    const [conversation] = await db.insert(conversations).values(conversationData).returning();\n    return conversation;\n  }\n\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    const [conversation] = await db.select().from(conversations).where(eq(conversations.id, id));\n    return conversation;\n  }\n\n  async getUserConversations(userId: string): Promise<Conversation[]> {\n    return await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.userId, userId))\n      .orderBy(desc(conversations.createdAt));\n  }\n\n  async getBotConversations(botId: string): Promise<Conversation[]> {\n    return await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.botId, botId))\n      .orderBy(desc(conversations.createdAt));\n  }\n\n  async getTeamConversations(teamId: string): Promise<Conversation[]> {\n    return await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.teamId, teamId))\n      .orderBy(desc(conversations.createdAt));\n  }\n\n  async deleteConversation(id: string): Promise<void> {\n    await db.delete(conversations).where(eq(conversations.id, id));\n  }\n\n  // Message operations\n  async createMessage(messageData: InsertMessage): Promise<Message> {\n    const [message] = await db.insert(messages).values(messageData).returning();\n    return message;\n  }\n\n  async getConversationMessages(conversationId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  // Team Session operations\n  async createTeamSession(sessionData: InsertTeamSession): Promise<TeamSession> {\n    const [session] = await db.insert(teamSessions).values(sessionData).returning();\n    return session;\n  }\n\n  async getTeamSession(id: string): Promise<TeamSession | undefined> {\n    const [session] = await db.select().from(teamSessions).where(eq(teamSessions.id, id));\n    return session;\n  }\n\n  async getTeamSessions(teamId: string): Promise<TeamSession[]> {\n    return await db\n      .select()\n      .from(teamSessions)\n      .where(eq(teamSessions.teamId, teamId))\n      .orderBy(desc(teamSessions.createdAt));\n  }\n\n  async updateTeamSession(id: string, updates: UpdateTeamSession): Promise<TeamSession | undefined> {\n    const [session] = await db\n      .update(teamSessions)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(teamSessions.id, id))\n      .returning();\n    return session;\n  }\n\n  async deleteTeamSession(id: string): Promise<void> {\n    await db.delete(teamSessions).where(eq(teamSessions.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9080},"client/src/components/examples/OutputMultiView.tsx":{"content":"import { OutputMultiView } from '../OutputMultiView';\n\nexport default function OutputMultiViewExample() {\n  //todo: remove mock functionality\n  const mockResponses = [\n    {\n      botName: \"Content Writer\",\n      model: \"GPT-4\",\n      response: \"Here's a comprehensive blog post about AI in healthcare. Artificial Intelligence is transforming the medical field through advanced diagnostic tools, personalized treatment plans, and predictive analytics. Modern healthcare facilities are integrating AI to improve patient outcomes and streamline operations...\"\n    },\n    {\n      botName: \"SEO Specialist\",\n      model: \"Claude\",\n      response: \"From an SEO perspective, this content should target keywords like 'AI healthcare solutions', 'medical AI technology', and 'healthcare automation'. The structure should include clear H2 and H3 headings, with the primary keyword appearing in the first 100 words. Meta description should be 150-160 characters highlighting the main benefits...\"\n    },\n    {\n      botName: \"Editor\",\n      model: \"Gemini\",\n      response: \"The content flows well but could benefit from tighter prose in the introduction. Consider breaking up the longer paragraphs and adding more concrete examples. The technical terminology is appropriate for the target audience, but we should add a brief glossary section for clarity...\"\n    }\n  ];\n\n  const mockCombined = \"Artificial Intelligence is revolutionizing healthcare through advanced diagnostic tools, personalized treatment plans, and predictive analytics. This comprehensive guide explores how AI is transforming medical practices and improving patient outcomes.\\n\\n[Combined insights from Writer, SEO, and Editor perspectives...]\";\n\n  return (\n    <OutputMultiView\n      responses={mockResponses}\n      combinedOutput={mockCombined}\n    />\n  );\n}\n","size_bytes":1821},"client/src/pages/Privacy.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Privacy() {\n  return (\n    <div className=\"min-h-screen bg-muted/30 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" className=\"mb-6\" data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Home\n          </Button>\n        </Link>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-4xl\">Privacy Policy</CardTitle>\n            <p className=\"text-muted-foreground\">Last updated: October 2024</p>\n          </CardHeader>\n          <CardContent className=\"prose prose-sm max-w-none\">\n            <h2>Introduction</h2>\n            <p>\n              AI Nexus (\"we\", \"our\", or \"us\") is committed to protecting your privacy. This Privacy Policy\n              explains how we collect, use, and safeguard your information when you use our AI collaboration platform.\n            </p>\n\n            <h2>Information We Collect</h2>\n            <p>We collect information that you provide directly to us, including:</p>\n            <ul>\n              <li>Account information (email, name, password)</li>\n              <li>AI bot configurations and team settings</li>\n              <li>Content you submit to AI models</li>\n              <li>Usage data and analytics</li>\n            </ul>\n\n            <h2>How We Use Your Information</h2>\n            <p>We use the information we collect to:</p>\n            <ul>\n              <li>Provide and maintain our services</li>\n              <li>Process your AI model requests through OpenRouter</li>\n              <li>Improve and personalize your experience</li>\n              <li>Send you technical notices and updates</li>\n            </ul>\n\n            <h2>Data Security</h2>\n            <p>\n              We implement appropriate technical and organizational measures to protect your personal information.\n              However, no method of transmission over the Internet is 100% secure.\n            </p>\n\n            <h2>Third-Party Services</h2>\n            <p>\n              We use OpenRouter AI to process your AI requests. Their privacy policy governs how they handle\n              the data transmitted through their API.\n            </p>\n\n            <h2>Your Rights</h2>\n            <p>You have the right to:</p>\n            <ul>\n              <li>Access your personal data</li>\n              <li>Correct inaccurate data</li>\n              <li>Request deletion of your data</li>\n              <li>Export your data</li>\n            </ul>\n\n            <h2>Contact Us</h2>\n            <p>\n              If you have questions about this Privacy Policy, please contact us at privacy@ainexus.example.com\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2979},"client/src/components/examples/OutputCard.tsx":{"content":"import { OutputCard } from '../OutputCard';\n\nexport default function OutputCardExample() {\n  return (\n    <OutputCard\n      title=\"Blog Post: AI in Healthcare\"\n      timestamp=\"2 hours ago\"\n      teamName=\"Content Team\"\n      preview=\"Artificial Intelligence is revolutionizing healthcare in unprecedented ways. From diagnostic assistance to personalized treatment plans, AI-powered systems are helping medical professionals deliver better patient outcomes...\"\n    />\n  );\n}\n","size_bytes":475},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/BotCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bot, Edit, Trash2, AlertTriangle } from \"lucide-react\";\n\ninterface BotCardProps {\n  name: string;\n  model: string;\n  purpose: string;\n  role: string;\n  modelValid?: boolean;\n  onEdit?: () => void;\n  onDelete?: () => void;\n}\n\nexport function BotCard({ name, model, purpose, role, modelValid = true, onEdit, onDelete }: BotCardProps) {\n  const handleEdit = () => {\n    console.log(\"Edit bot:\", name);\n    onEdit?.();\n  };\n\n  const handleDelete = () => {\n    console.log(\"Delete bot:\", name);\n    onDelete?.();\n  };\n\n  return (\n    <Card className=\"hover-elevate\" data-testid=\"card-bot\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n              <Bot className=\"h-5 w-5 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold\" data-testid=\"text-bot-name\">{name}</h3>\n              <div className=\"flex items-center gap-2 mt-1\">\n                <Badge variant=\"secondary\" className=\"text-xs font-mono\" data-testid=\"badge-model\">\n                  {model}\n                </Badge>\n                {modelValid === false && (\n                  <Badge variant=\"destructive\" className=\"text-xs gap-1\" data-testid=\"badge-invalid-model\">\n                    <AlertTriangle className=\"h-3 w-3\" />\n                    Invalid Model\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pb-3\">\n        {modelValid === false && (\n          <div className=\"mb-3 p-3 rounded-lg bg-destructive/10 border border-destructive/20\" data-testid=\"alert-invalid-model\">\n            <div className=\"flex gap-2\">\n              <AlertTriangle className=\"h-4 w-4 text-destructive shrink-0 mt-0.5\" />\n              <div className=\"text-xs text-destructive-foreground\">\n                <p className=\"font-medium mb-1\">This model is no longer available</p>\n                <p className=\"text-muted-foreground\">Delete this bot and create a new one with a working model to fix the issue.</p>\n              </div>\n            </div>\n          </div>\n        )}\n        <div className=\"space-y-2\">\n          <div>\n            <span className=\"text-xs font-medium text-muted-foreground\">Role:</span>\n            <p className=\"text-sm mt-1\" data-testid=\"text-role\">{role}</p>\n          </div>\n          <div>\n            <span className=\"text-xs font-medium text-muted-foreground\">Purpose:</span>\n            <p className=\"text-sm mt-1 text-muted-foreground\" data-testid=\"text-purpose\">{purpose}</p>\n          </div>\n        </div>\n      </CardContent>\n      \n      <CardFooter className=\"pt-3 border-t gap-2\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleEdit}\n          data-testid=\"button-edit\"\n        >\n          <Edit className=\"h-4 w-4 mr-1\" />\n          Edit\n        </Button>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleDelete}\n          data-testid=\"button-delete\"\n        >\n          <Trash2 className=\"h-4 w-4 mr-1\" />\n          Delete\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":3507},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/OutputMultiView.tsx":{"content":"import { useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Copy, MessageSquare, Bot } from \"lucide-react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\ninterface BotResponse {\n  botName: string;\n  model: string;\n  response: string;\n}\n\ninterface OutputMultiViewProps {\n  responses: BotResponse[];\n  combinedOutput?: string;\n}\n\nexport function OutputMultiView({ responses, combinedOutput }: OutputMultiViewProps) {\n  const [selectedBots, setSelectedBots] = useState<Set<number>>(new Set());\n  const [followUpInputs, setFollowUpInputs] = useState<Record<number, string>>({});\n  const [showFollowUp, setShowFollowUp] = useState<Record<number, boolean>>({});\n\n  const toggleBotSelection = (index: number) => {\n    const newSelected = new Set(selectedBots);\n    if (newSelected.has(index)) {\n      newSelected.delete(index);\n    } else {\n      newSelected.add(index);\n    }\n    setSelectedBots(newSelected);\n  };\n\n  const handleCopy = (text: string) => {\n    navigator.clipboard.writeText(text);\n    console.log(\"Copied to clipboard\");\n  };\n\n  const handleFollowUp = (index: number) => {\n    console.log(\"Follow up with bot:\", responses[index].botName, followUpInputs[index]);\n    setFollowUpInputs({ ...followUpInputs, [index]: \"\" });\n  };\n\n  return (\n    <Tabs defaultValue=\"combined\" className=\"w-full\">\n      <TabsList className=\"grid w-full grid-cols-3\" data-testid=\"tabs-output-view\">\n        <TabsTrigger value=\"combined\" data-testid=\"tab-combined\">Combined View</TabsTrigger>\n        <TabsTrigger value=\"individual\" data-testid=\"tab-individual\">Individual Outputs</TabsTrigger>\n        <TabsTrigger value=\"comparison\" data-testid=\"tab-comparison\">Comparison</TabsTrigger>\n      </TabsList>\n\n      <TabsContent value=\"combined\" className=\"mt-6\">\n        <Card>\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-semibold\">Unified Team Response</h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => handleCopy(combinedOutput || \"\")}\n                data-testid=\"button-copy-combined\"\n              >\n                <Copy className=\"h-4 w-4 mr-2\" />\n                Copy\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"prose prose-sm max-w-none\" data-testid=\"text-combined-output\">\n              {combinedOutput || \"Combined output will appear here...\"}\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"individual\" className=\"mt-6\">\n        <div className=\"space-y-4\">\n          {responses.map((response, index) => (\n            <Card key={index} data-testid={`card-response-${index}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between gap-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Checkbox\n                      checked={selectedBots.has(index)}\n                      onCheckedChange={() => toggleBotSelection(index)}\n                      data-testid={`checkbox-select-${index}`}\n                    />\n                    <div className=\"flex items-center gap-2\">\n                      <Bot className=\"h-4 w-4 text-primary\" />\n                      <span className=\"font-semibold\" data-testid={`text-bot-name-${index}`}>\n                        {response.botName}\n                      </span>\n                      <Badge variant=\"secondary\" className=\"text-xs font-mono\">\n                        {response.model}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setShowFollowUp({ ...showFollowUp, [index]: !showFollowUp[index] })}\n                      data-testid={`button-followup-${index}`}\n                    >\n                      <MessageSquare className=\"h-4 w-4 mr-1\" />\n                      Follow Up\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleCopy(response.response)}\n                      data-testid={`button-copy-${index}`}\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"prose prose-sm max-w-none\" data-testid={`text-response-${index}`}>\n                  {response.response}\n                </div>\n                \n                {showFollowUp[index] && (\n                  <div className=\"space-y-2 pt-3 border-t\">\n                    <Textarea\n                      placeholder=\"Ask a follow-up question to this bot...\"\n                      className=\"min-h-20\"\n                      value={followUpInputs[index] || \"\"}\n                      onChange={(e) => setFollowUpInputs({ ...followUpInputs, [index]: e.target.value })}\n                      data-testid={`textarea-followup-${index}`}\n                    />\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleFollowUp(index)}\n                      data-testid={`button-submit-followup-${index}`}\n                    >\n                      Send\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {selectedBots.size > 0 && (\n          <Card className=\"mt-4 bg-primary/5\">\n            <CardContent className=\"pt-6\">\n              <p className=\"text-sm mb-3\">\n                <strong>{selectedBots.size}</strong> bot(s) selected for follow-up\n              </p>\n              <div className=\"flex gap-2\">\n                <Textarea\n                  placeholder=\"Send follow-up to selected bots...\"\n                  className=\"flex-1\"\n                  data-testid=\"textarea-multi-followup\"\n                />\n                <Button data-testid=\"button-submit-multi-followup\">Send to Selected</Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </TabsContent>\n\n      <TabsContent value=\"comparison\" className=\"mt-6\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full border-collapse\">\n            <thead>\n              <tr className=\"border-b\">\n                <th className=\"text-left p-4 font-semibold\">Bot</th>\n                <th className=\"text-left p-4 font-semibold\">Response</th>\n              </tr>\n            </thead>\n            <tbody>\n              {responses.map((response, index) => (\n                <tr key={index} className=\"border-b\" data-testid={`row-comparison-${index}`}>\n                  <td className=\"p-4 align-top\">\n                    <div className=\"space-y-1\">\n                      <div className=\"font-semibold\">{response.botName}</div>\n                      <Badge variant=\"secondary\" className=\"text-xs font-mono\">\n                        {response.model}\n                      </Badge>\n                    </div>\n                  </td>\n                  <td className=\"p-4\">\n                    <div className=\"prose prose-sm max-w-none\">\n                      {response.response}\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </TabsContent>\n    </Tabs>\n  );\n}\n","size_bytes":7947},"client/src/components/examples/AppSidebar.tsx":{"content":"import { AppSidebar } from '../AppSidebar';\n\nexport default function AppSidebarExample() {\n  return (\n    <div className=\"h-screen\">\n      <AppSidebar />\n    </div>\n  );\n}\n","size_bytes":172},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/examples/HeroSection.tsx":{"content":"import { HeroSection } from '../HeroSection';\n\nexport default function HeroSectionExample() {\n  return <HeroSection />;\n}\n","size_bytes":122},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/DashboardStats.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Bot, Users, FileText, Zap } from \"lucide-react\";\n\n//todo: remove mock functionality\nconst stats = [\n  { icon: Bot, label: \"Total Bots\", value: \"12\", change: \"+3 this week\" },\n  { icon: Users, label: \"Active Teams\", value: \"5\", change: \"+2 this week\" },\n  { icon: FileText, label: \"Saved Outputs\", value: \"48\", change: \"+15 this week\" },\n  { icon: Zap, label: \"API Usage\", value: \"2.4K\", change: \"requests\" }\n];\n\nexport function DashboardStats() {\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n      {stats.map((stat, index) => (\n        <Card key={index} data-testid={`card-stat-${index}`}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <stat.icon className=\"h-5 w-5 text-muted-foreground\" />\n            </div>\n            <div className=\"text-2xl font-bold mb-1\">{stat.value}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">{stat.label}</div>\n            <div className=\"text-xs text-primary\">{stat.change}</div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1175},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user: any = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategyName = `replitauth:${domain}`;\n    const strategy = new Strategy(\n      {\n        name: strategyName,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4265},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/pages/Home.tsx":{"content":"import { NavHeader } from \"@/components/NavHeader\";\nimport { HeroSection } from \"@/components/HeroSection\";\nimport { FeaturesSection } from \"@/components/FeaturesSection\";\nimport { HowItWorksSection } from \"@/components/HowItWorksSection\";\nimport { CTASection } from \"@/components/CTASection\";\nimport { Footer } from \"@/components/Footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen\">\n      <NavHeader />\n      <main className=\"pt-16\">\n        <HeroSection />\n        <FeaturesSection />\n        <HowItWorksSection />\n        <CTASection />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":625},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/examples/BotConfigForm.tsx":{"content":"import { BotConfigForm } from '../BotConfigForm';\n\nexport default function BotConfigFormExample() {\n  return (\n    <div className=\"max-w-2xl\">\n      <BotConfigForm />\n    </div>\n  );\n}\n","size_bytes":185},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return <ThemeToggle />;\n}\n","size_bytes":122},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/NavHeader.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { Network } from \"lucide-react\";\n\nexport function NavHeader() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  const handleSignup = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-50 bg-background/80 backdrop-blur-lg border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-6 h-16 flex items-center justify-between\">\n        <Link href=\"/\" className=\"flex items-center gap-2\" data-testid=\"link-home\">\n          <div className=\"w-8 h-8 rounded-lg bg-primary flex items-center justify-center\">\n            <Network className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <span className=\"font-bold text-xl\">AI Nexus</span>\n        </Link>\n        \n        <nav className=\"hidden md:flex items-center gap-6\">\n          <a href=\"/#features\" className=\"text-sm font-medium hover:text-primary transition-colors\" data-testid=\"link-nav-features\">\n            Features\n          </a>\n          <a href=\"/#how-it-works\" className=\"text-sm font-medium hover:text-primary transition-colors\" data-testid=\"link-nav-how\">\n            How It Works\n          </a>\n        </nav>\n        \n        <div className=\"flex items-center gap-2\">\n          <ThemeToggle />\n          <Button\n            onClick={handleLogin}\n            data-testid=\"button-get-started\"\n          >\n            Get Started\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1612},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/pages/CreateBot.tsx":{"content":"import { BotConfigForm } from \"@/components/BotConfigForm\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Bot } from \"lucide-react\";\n\nexport default function CreateBot() {\n  return (\n    <div className=\"p-8 max-w-7xl mx-auto\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Create New Bot</h1>\n        <p className=\"text-muted-foreground\">Configure your AI bot with specific roles and capabilities</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        <div className=\"lg:col-span-2\">\n          <BotConfigForm />\n        </div>\n\n        <div className=\"space-y-4\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"w-16 h-16 rounded-lg bg-primary/10 flex items-center justify-center mx-auto\">\n                  <Bot className=\"h-8 w-8 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Live Preview</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Your bot configuration will appear here as you build it\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6 space-y-3\">\n              <h4 className=\"font-semibold text-sm\">Tips</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-2\">\n                <li>• Be specific about the bot's role</li>\n                <li>• Include expertise areas in the system prompt</li>\n                <li>• Adjust temperature based on creativity needs</li>\n                <li>• Higher tokens allow longer responses</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1891},"client/src/components/HowItWorksSection.tsx":{"content":"import { Card } from \"@/components/ui/card\";\n\nconst steps = [\n  {\n    number: \"01\",\n    title: \"Create Bots\",\n    description: \"Configure AI bots with specific roles, models, and purposes tailored to your needs.\"\n  },\n  {\n    number: \"02\",\n    title: \"Build Teams\",\n    description: \"Assemble bots into collaborative teams. Mix and match capabilities for optimal results.\"\n  },\n  {\n    number: \"03\",\n    title: \"Submit Brief\",\n    description: \"Provide a single brief to your team. All bots work simultaneously on the task.\"\n  },\n  {\n    number: \"04\",\n    title: \"Review Outputs\",\n    description: \"Examine combined and individual responses in a multi-view interface.\"\n  },\n  {\n    number: \"05\",\n    title: \"Iterate\",\n    description: \"Follow up with the whole team or specific bots. Refine and perfect your results.\"\n  }\n];\n\nexport function HowItWorksSection() {\n  return (\n    <section className=\"py-20 bg-background\">\n      <div className=\"max-w-6xl mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold mb-4\">How It Works</h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Five simple steps to orchestrate AI collaboration\n          </p>\n        </div>\n        \n        <div className=\"relative\">\n          <div className=\"absolute top-8 left-0 right-0 h-0.5 bg-border hidden lg:block\" />\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-6 relative\">\n            {steps.map((step, index) => (\n              <Card\n                key={index}\n                className=\"p-6 text-center hover-elevate\"\n                data-testid={`card-step-${index}`}\n              >\n                <div className=\"w-16 h-16 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold text-xl mx-auto mb-4\">\n                  {step.number}\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">{step.title}</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {step.description}\n                </p>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2193},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/pages/TeamWorkspace.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { Users, Bot, Loader2, AlertCircle, Save, MessageSquare, ListChecks, Sparkles } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { OutputMultiView } from \"@/components/OutputMultiView\";\nimport { ChatInterface } from \"@/components/ChatInterface\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Team, Bot as BotType } from \"@shared/schema\";\n\ninterface BotResponse {\n  botId: string;\n  botName: string;\n  task: string;\n  output: string;\n  status: \"success\" | \"error\";\n  error?: string;\n}\n\nexport default function TeamWorkspace() {\n  const [, params] = useRoute(\"/teams/:id\");\n  const [, setLocation] = useLocation();\n  const teamId = params?.id;\n  const { toast } = useToast();\n  \n  const [brief, setBrief] = useState(\"\");\n  const [delegations, setDelegations] = useState<Record<string, string>>({});\n  const [responses, setResponses] = useState<BotResponse[]>([]);\n  const [combinedOutput, setCombinedOutput] = useState(\"\");\n  const [hasExecuted, setHasExecuted] = useState(false);\n  const [outputTitle, setOutputTitle] = useState(\"\");\n  const [teamConversationId, setTeamConversationId] = useState<string | undefined>(undefined);\n\n  const { data: team, isLoading: teamLoading } = useQuery<Team>({\n    queryKey: [`/api/teams/${teamId}`],\n    enabled: !!teamId,\n  });\n\n  const { data: teamBots = [], isLoading: botsLoading } = useQuery<BotType[]>({\n    queryKey: [`/api/teams/${teamId}/bots`],\n    enabled: !!teamId,\n  });\n\n  // Fetch latest conversation for the team\n  const { data: teamConversations = [] } = useQuery<Array<{ id: string; teamId: string; createdAt: string }>>({\n    queryKey: [\"/api/conversations\", { teamId }],\n    enabled: !!teamId,\n  });\n\n  // Set the latest conversation ID when team is loaded\n  useEffect(() => {\n    if (teamConversations.length > 0) {\n      setTeamConversationId(teamConversations[0].id);\n    } else {\n      setTeamConversationId(undefined);\n    }\n  }, [teamConversations]);\n\n  const saveOutputMutation = useMutation({\n    mutationFn: async (data: { title: string; brief: string; delegations: any; responses: BotResponse[]; combinedOutput: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/outputs\", {\n        teamId: teamId,\n        title: data.title,\n        brief: data.brief,\n        delegations: data.delegations,\n        responses: data.responses,\n        combinedOutput: data.combinedOutput,\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to save output\");\n      }\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/outputs\"] });\n      toast({\n        title: \"Saved\",\n        description: \"Output saved successfully! View it in the Outputs page.\",\n      });\n      setOutputTitle(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save output\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const executeMutation = useMutation({\n    mutationFn: async (data: { teamId: string; brief: string; delegations: Array<{ botId: string; task: string }> }) => {\n      const response = await apiRequest(\"POST\", \"/api/openrouter/execute\", data);\n      const result = await response.json();\n      return result as { responses: BotResponse[] };\n    },\n    onSuccess: (data: { responses: BotResponse[] }) => {\n      if (!data || !Array.isArray(data.responses)) {\n        toast({\n          title: \"Error\",\n          description: \"Invalid response format from server\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setResponses(data.responses);\n      \n      // Generate combined output from successful responses\n      const successfulResponses = data.responses.filter(r => r.status === \"success\");\n      if (successfulResponses.length > 0) {\n        const combined = successfulResponses.map((r, idx) => \n          `${idx + 1}. ${r.botName} (${r.task}):\\n\\n${r.output}`\n        ).join(\"\\n\\n---\\n\\n\");\n        setCombinedOutput(combined);\n      } else {\n        // Clear combined output when all executions fail\n        setCombinedOutput(\"\");\n        toast({\n          title: \"Warning\",\n          description: \"All team members encountered errors. Please check the individual responses.\",\n          variant: \"destructive\",\n        });\n      }\n      \n      setHasExecuted(true);\n      \n      const errorCount = data.responses.filter(r => r.status === \"error\").length;\n      toast({\n        title: \"Execution Complete\",\n        description: errorCount > 0 \n          ? `${successfulResponses.length} succeeded, ${errorCount} failed`\n          : `All ${data.responses.length} team members completed successfully`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveOutput = () => {\n    if (!outputTitle.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a title for the output\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const delegationsList = teamBots.map(bot => ({\n      botId: bot.id,\n      task: delegations[bot.id] || `Work on: ${brief}`,\n    }));\n\n    saveOutputMutation.mutate({\n      title: outputTitle,\n      brief,\n      delegations: delegationsList,\n      responses,\n      combinedOutput,\n    });\n  };\n\n  const handleExecute = () => {\n    if (!brief.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a brief\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Clear previous results before execution\n    setCombinedOutput(\"\");\n    setResponses([]);\n    setHasExecuted(false);\n\n    const delegationsList = teamBots.map(bot => ({\n      botId: bot.id,\n      task: delegations[bot.id] || `Work on: ${brief}`,\n    }));\n\n    executeMutation.mutate({\n      teamId: teamId!,\n      brief,\n      delegations: delegationsList,\n    });\n  };\n\n  if (teamLoading || botsLoading) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading team workspace...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!team) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Team not found</h3>\n              <p className=\"text-muted-foreground\">The requested team does not exist</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (teamBots.length === 0) {\n    return (\n      <div className=\"h-full overflow-auto\">\n        <div className=\"max-w-7xl mx-auto p-8\">\n          <Card>\n            <CardContent className=\"pt-12 pb-12 text-center\">\n              <div className=\"w-20 h-20 rounded-2xl bg-muted flex items-center justify-center mx-auto mb-6\">\n                <Bot className=\"h-10 w-10 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">No team members</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                This team doesn't have any bots yet. Add some bots to get started.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"max-w-7xl mx-auto p-8 space-y-6\">\n        <div className=\"flex items-center justify-between gap-4 mb-2 flex-wrap\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 rounded-xl bg-primary/10 flex items-center justify-center\">\n              <Users className=\"h-6 w-6 text-primary\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold\">{team.name}</h1>\n              <p className=\"text-muted-foreground\">{team.description || \"Collaborate with your AI team\"}</p>\n            </div>\n          </div>\n          <Button\n            onClick={() => setLocation(`/teams/${teamId}/collaborate`)}\n            variant=\"default\"\n            size=\"lg\"\n            className=\"gap-2\"\n            data-testid=\"button-collaborative-mode\"\n          >\n            <Sparkles className=\"h-5 w-5\" />\n            Full Collaborative Mode\n          </Button>\n        </div>\n        \n        {/* Info Card about Collaborative Mode */}\n        <Card className=\"bg-primary/5 border-primary/20\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <Sparkles className=\"h-5 w-5 text-primary\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium text-sm mb-1\">Try Full Collaborative Mode</p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Experience true team collaboration: Planning phase (bots ask questions), Execution phase (collaborative work), and Review phase (bots critique and suggest improvements). Click \"Full Collaborative Mode\" above.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs defaultValue=\"brief\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"brief\" className=\"gap-2\" data-testid=\"tab-brief-delegation\">\n              <ListChecks className=\"h-4 w-4\" />\n              Brief Delegation\n            </TabsTrigger>\n            <TabsTrigger value=\"chat\" className=\"gap-2\" data-testid=\"tab-team-chat\">\n              <MessageSquare className=\"h-4 w-4\" />\n              Team Chat\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"brief\" className=\"mt-6\">\n            <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  Collaborative Team Execution\n                </CardTitle>\n                <CardDescription>\n                  Team members work sequentially, with each bot seeing and building upon previous teammates' outputs\n                </CardDescription>\n              </div>\n              <div className=\"flex flex-col items-end gap-2\">\n                <Badge variant=\"secondary\" data-testid=\"badge-member-count\">\n                  {teamBots.length} AI Bots\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  Sequential Collaboration\n                </Badge>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"brief\">Project Brief</Label>\n              <Textarea\n                id=\"brief\"\n                placeholder=\"Enter your project brief... This sets the context for all team members.\"\n                className=\"min-h-32 mt-2\"\n                value={brief}\n                onChange={(e) => setBrief(e.target.value)}\n                data-testid=\"textarea-brief\"\n              />\n            </div>\n\n            <div className=\"space-y-4\">\n              <Label>Task Delegation (Optional - customize each bot's specific task)</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {teamBots.map((bot) => (\n                  <Card key={bot.id} className=\"bg-muted/30\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                          <Bot className=\"h-5 w-5 text-primary\" />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"font-semibold\">{bot.name}</h4>\n                          {bot.role && (\n                            <p className=\"text-xs text-muted-foreground\">{bot.role}</p>\n                          )}\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <Input\n                        placeholder={`Specific task for ${bot.name}... (leave empty to use brief)`}\n                        value={delegations[bot.id] || \"\"}\n                        onChange={(e) => setDelegations({ ...delegations, [bot.id]: e.target.value })}\n                        data-testid={`input-task-${bot.id}`}\n                      />\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"p-4 rounded-lg bg-primary/5 border border-primary/20\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                    <Users className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div className=\"flex-1 text-sm\">\n                    <p className=\"font-medium text-foreground mb-1\">How Collaborative Execution Works:</p>\n                    <ul className=\"text-muted-foreground space-y-1 text-xs\">\n                      <li>• Bot #{1} receives the brief and completes their task first</li>\n                      <li>• Bot #{2} sees Bot #1's output and builds upon it</li>\n                      <li>• Each subsequent bot sees all previous work, enabling true collaboration</li>\n                      <li>• Final output represents the collective intelligence of the entire team</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n              \n              <Button\n                onClick={handleExecute}\n                disabled={!brief.trim() || executeMutation.isPending}\n                size=\"lg\"\n                className=\"w-full gap-2\"\n                data-testid=\"button-execute-team\"\n              >\n                {executeMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-5 w-5 animate-spin\" />\n                    Collaborating Sequentially...\n                  </>\n                ) : (\n                  <>\n                    <Users className=\"h-5 w-5\" />\n                    Start Collaborative Execution\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {hasExecuted && responses.length > 0 && (\n          <>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Save className=\"h-5 w-5\" />\n                  Save Output\n                </CardTitle>\n                <CardDescription>Save this execution result for later reference</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"output-title\">Output Title</Label>\n                  <Input\n                    id=\"output-title\"\n                    placeholder=\"e.g., Product Description v1, Marketing Campaign Ideas\"\n                    value={outputTitle}\n                    onChange={(e) => setOutputTitle(e.target.value)}\n                    data-testid=\"input-output-title\"\n                    className=\"mt-2\"\n                  />\n                </div>\n                <Button\n                  onClick={handleSaveOutput}\n                  disabled={!outputTitle.trim() || saveOutputMutation.isPending}\n                  className=\"gap-2\"\n                  data-testid=\"button-save-output\"\n                >\n                  {saveOutputMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      Saving...\n                    </>\n                  ) : (\n                    <>\n                      <Save className=\"h-4 w-4\" />\n                      Save to Outputs\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <h2 className=\"text-2xl font-semibold\">Team Responses</h2>\n                <Badge variant=\"outline\">\n                  {responses.filter(r => r.status === \"success\").length} / {responses.length} successful\n                </Badge>\n              </div>\n              <OutputMultiView\n                responses={responses.map(r => ({\n                  botName: `${r.botName}${r.task ? ` - ${r.task.slice(0, 50)}...` : \"\"}`,\n                  model: r.status === \"error\" ? `Error: ${r.error}` : \"Success\",\n                  response: r.output || r.error || \"No response\",\n                }))}\n                combinedOutput={combinedOutput}\n              />\n            </div>\n          </>\n        )}\n          </TabsContent>\n\n          <TabsContent value=\"chat\" className=\"mt-6\">\n            <div className=\"h-[600px]\">\n              <ChatInterface\n                title={`Team: ${team.name}`}\n                chatType=\"team\"\n                entityId={teamId!}\n                conversationId={teamConversationId}\n                onConversationCreated={setTeamConversationId}\n              />\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18471},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-card border-t border-card-border py-12\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n          <div>\n            <h3 className=\"font-semibold text-lg mb-4\">AI Nexus</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Multi-model AI collaboration platform for teams\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"font-medium mb-4\">Product</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/features\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-features\">Features</Link></li>\n              <li><Link href=\"/pricing\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-pricing\">Pricing</Link></li>\n              <li><Link href=\"/docs\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-docs\">Documentation</Link></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-medium mb-4\">Legal</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/privacy\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-privacy\">Privacy Policy</Link></li>\n              <li><Link href=\"/terms\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-terms\">Terms of Service</Link></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-medium mb-4\">Resources</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/blog\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-blog\">Blog</Link></li>\n              <li><Link href=\"/support\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-support\">Support</Link></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border pt-8 text-center text-sm text-muted-foreground\">\n          <p>Powered by OpenRouter AI • © 2024 AI Nexus. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2254},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/examples/BotCard.tsx":{"content":"import { BotCard } from '../BotCard';\n\nexport default function BotCardExample() {\n  return (\n    <BotCard\n      name=\"Content Writer\"\n      model=\"GPT-4\"\n      purpose=\"Generate engaging blog content and articles\"\n      role=\"Writer\"\n    />\n  );\n}\n","size_bytes":248},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/examples/FeaturesSection.tsx":{"content":"import { FeaturesSection } from '../FeaturesSection';\n\nexport default function FeaturesSectionExample() {\n  return <FeaturesSection />;\n}\n","size_bytes":138},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/examples/TeamCard.tsx":{"content":"import { TeamCard } from '../TeamCard';\n\nexport default function TeamCardExample() {\n  //todo: remove mock functionality\n  const mockMembers = [\n    { name: \"Writer\", initials: \"WR\" },\n    { name: \"Editor\", initials: \"ED\" },\n    { name: \"SEO\", initials: \"SE\" },\n    { name: \"Researcher\", initials: \"RS\" }\n  ];\n\n  return (\n    <TeamCard\n      name=\"Content Creation Team\"\n      members={mockMembers}\n      description=\"Collaborative team for creating and optimizing blog content\"\n    />\n  );\n}\n","size_bytes":493},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/BotConfigForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Bot, Sparkles, Zap, Brain, Code, Image, MessageSquare } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertBotSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertBotSchema.omit({ userId: true }).extend({\n  model: z.string().min(1, \"Please select an AI model\"),\n  temperature: z.union([z.string(), z.number()]).transform(val => String(val)),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nconst categoryIcons: Record<string, any> = {\n  Multimodal: Image,\n  Reasoning: Brain,\n  Coding: Code,\n  Speed: Zap,\n  General: MessageSquare,\n  Instruction: Sparkles,\n  Large: Bot,\n};\n\nexport function BotConfigForm() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n\n  const { data: models = [] } = useQuery<Array<{ id: string; name: string; category: string }>>({\n    queryKey: [\"/api/openrouter/models\"],\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      model: \"\",\n      systemPrompt: \"\",\n      temperature: \"0.7\",\n      maxTokens: 1000,\n      role: \"\",\n    },\n  });\n\n  const createBotMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      await apiRequest(\"POST\", \"/api/bots\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bots\"] });\n      toast({\n        title: \"Success\",\n        description: \"Bot created successfully!\",\n      });\n      navigate(\"/bots\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    createBotMutation.mutate(data);\n  };\n\n  const categories = [\"all\", ...new Set(models.map(m => m.category))];\n  const filteredModels = selectedCategory === \"all\" \n    ? models \n    : models.filter(m => m.category === selectedCategory);\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Bot Identity</CardTitle>\n            <CardDescription>Give your bot a name and purpose</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Bot Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., Code Reviewer, Content Writer\" {...field} data-testid=\"input-bot-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"role\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Role</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., Senior Developer, Marketing Specialist\" {...field} data-testid=\"input-bot-role\" />\n                  </FormControl>\n                  <FormDescription>What role does this bot play in your team?</FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea placeholder=\"Describe what this bot specializes in...\" {...field} data-testid=\"input-bot-description\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sparkles className=\"h-5 w-5 text-primary\" />\n              AI Model Selection\n            </CardTitle>\n            <CardDescription>Choose from free OpenRouter models</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label>Filter by Category</Label>\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {categories.map((category) => {\n                  const Icon = categoryIcons[category] || Bot;\n                  return (\n                    <Button\n                      key={category}\n                      type=\"button\"\n                      size=\"sm\"\n                      variant={selectedCategory === category ? \"default\" : \"outline\"}\n                      onClick={() => setSelectedCategory(category)}\n                      data-testid={`button-category-${category.toLowerCase()}`}\n                      className=\"gap-2\"\n                    >\n                      <Icon className=\"h-4 w-4\" />\n                      {category === \"all\" ? \"All Models\" : category}\n                    </Button>\n                  );\n                })}\n              </div>\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"model\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Model</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-model\">\n                        <SelectValue placeholder=\"Select an AI model\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {filteredModels.map((model) => {\n                        const Icon = categoryIcons[model.category] || Bot;\n                        return (\n                          <SelectItem key={model.id} value={model.id}>\n                            <div className=\"flex items-center gap-2\">\n                              <Icon className=\"h-4 w-4\" />\n                              <span>{model.name}</span>\n                              <span className=\"text-xs text-muted-foreground\">({model.category})</span>\n                            </div>\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                  <FormDescription>All models are free to use</FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"systemPrompt\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>System Prompt</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"You are a helpful assistant that specializes in...\" \n                      className=\"min-h-32\"\n                      {...field} \n                      data-testid=\"input-system-prompt\"\n                    />\n                  </FormControl>\n                  <FormDescription>Define the bot's behavior and expertise</FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Advanced Settings</CardTitle>\n            <CardDescription>Fine-tune the bot's output behavior</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"temperature\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex items-center justify-between\">\n                    <FormLabel>Temperature</FormLabel>\n                    <span className=\"text-sm text-muted-foreground\">{field.value}</span>\n                  </div>\n                  <FormControl>\n                    <Slider\n                      min={0}\n                      max={2}\n                      step={0.1}\n                      value={[parseFloat(field.value)]}\n                      onValueChange={(vals) => field.onChange(vals[0].toString())}\n                      data-testid=\"slider-temperature\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Lower = more focused, Higher = more creative\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"maxTokens\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Max Tokens</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"number\" \n                      {...field} \n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      data-testid=\"input-max-tokens\"\n                    />\n                  </FormControl>\n                  <FormDescription>Maximum length of the bot's response</FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </CardContent>\n        </Card>\n\n        {Object.keys(form.formState.errors).length > 0 && (\n          <div className=\"p-4 border border-destructive rounded-lg bg-destructive/10\">\n            <p className=\"font-semibold text-destructive mb-2\">Form Validation Errors:</p>\n            <ul className=\"text-sm text-destructive space-y-1\">\n              {Object.entries(form.formState.errors).map(([key, error]) => (\n                <li key={key}>{key}: {error?.message?.toString() || \"Invalid value\"}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        <div className=\"flex gap-3\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => navigate(\"/bots\")}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={createBotMutation.isPending}\n            data-testid=\"button-create-bot\"\n            className=\"gap-2\"\n          >\n            {createBotMutation.isPending ? (\n              <>Creating...</>\n            ) : (\n              <>\n                <Bot className=\"h-4 w-4\" />\n                Create Bot\n              </>\n            )}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":11767},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Terms.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Terms() {\n  return (\n    <div className=\"min-h-screen bg-muted/30 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" className=\"mb-6\" data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Home\n          </Button>\n        </Link>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-4xl\">Terms of Service</CardTitle>\n            <p className=\"text-muted-foreground\">Last updated: October 2024</p>\n          </CardHeader>\n          <CardContent className=\"prose prose-sm max-w-none\">\n            <h2>Agreement to Terms</h2>\n            <p>\n              By accessing and using AI Nexus, you agree to be bound by these Terms of Service and all\n              applicable laws and regulations.\n            </p>\n\n            <h2>Use License</h2>\n            <p>\n              We grant you a limited, non-exclusive, non-transferable license to use AI Nexus for your\n              personal or business purposes, subject to these terms.\n            </p>\n\n            <h2>User Responsibilities</h2>\n            <p>You agree to:</p>\n            <ul>\n              <li>Provide accurate account information</li>\n              <li>Maintain the security of your account</li>\n              <li>Use the service in compliance with all applicable laws</li>\n              <li>Not misuse or abuse the AI models</li>\n              <li>Not attempt to reverse engineer or compromise the platform</li>\n            </ul>\n\n            <h2>AI Model Usage</h2>\n            <p>\n              AI Nexus uses OpenRouter AI to provide AI model capabilities. You acknowledge that:\n            </p>\n            <ul>\n              <li>AI responses may not always be accurate</li>\n              <li>You are responsible for verifying AI-generated content</li>\n              <li>Usage is subject to OpenRouter's terms and rate limits</li>\n            </ul>\n\n            <h2>Content Ownership</h2>\n            <p>\n              You retain ownership of any content you submit to AI Nexus. By using our service, you grant\n              us a license to process your content through AI models for the purpose of providing our services.\n            </p>\n\n            <h2>Limitation of Liability</h2>\n            <p>\n              AI Nexus shall not be liable for any indirect, incidental, special, consequential, or punitive\n              damages resulting from your use of or inability to use the service.\n            </p>\n\n            <h2>Modifications</h2>\n            <p>\n              We reserve the right to modify these terms at any time. Continued use of the service after\n              changes constitutes acceptance of the new terms.\n            </p>\n\n            <h2>Termination</h2>\n            <p>\n              We may terminate or suspend your account at any time for violations of these terms or for any\n              other reason at our discretion.\n            </p>\n\n            <h2>Contact</h2>\n            <p>\n              For questions about these Terms of Service, contact us at legal@ainexus.example.com\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3420},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/Signup.tsx":{"content":"import { SignupForm } from \"@/components/SignupForm\";\n\nexport default function Signup() {\n  return <SignupForm />;\n}\n","size_bytes":117},"server/openrouter.ts":{"content":"// OpenRouter AI API integration\nexport interface OpenRouterModel {\n  id: string;\n  name: string;\n  description?: string;\n  pricing: {\n    prompt: string;\n    completion: string;\n  };\n  context_length: number;\n  architecture?: {\n    modality?: string;\n    tokenizer?: string;\n  };\n  top_provider?: {\n    context_length?: number;\n    max_completion_tokens?: number;\n  };\n}\n\nexport interface ChatMessage {\n  role: \"system\" | \"user\" | \"assistant\";\n  content: string;\n}\n\nexport interface ChatCompletionRequest {\n  model: string;\n  messages: ChatMessage[];\n  temperature?: number;\n  max_tokens?: number;\n}\n\nexport interface ChatCompletionResponse {\n  id: string;\n  model: string;\n  created: number;\n  choices: Array<{\n    index: number;\n    message: {\n      role: string;\n      content: string;\n    };\n    finish_reason: string;\n  }>;\n  usage?: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\nconst OPENROUTER_API_URL = \"https://openrouter.ai/api/v1\";\n\n// Cache for free models (refresh every 6 hours) - scoped by API key\nconst modelCache = new Map<string, { models: Array<{ id: string; name: string; category: string }>; timestamp: number }>();\nconst CACHE_DURATION = 6 * 60 * 60 * 1000; // 6 hours\n\n// Simple hash function for API key (for cache keying)\nfunction hashApiKey(apiKey: string): string {\n  // Use a simple hash to avoid storing raw API keys\n  let hash = 0;\n  for (let i = 0; i < apiKey.length; i++) {\n    const char = apiKey.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  return hash.toString(36);\n}\n\n// Categorize models based on ID and description\nfunction categorizeModel(model: OpenRouterModel): string {\n  const id = model.id.toLowerCase();\n  const name = model.name?.toLowerCase() || \"\";\n  \n  if (id.includes(\"vision\") || id.includes(\"vl\") || id.includes(\"multimodal\") || name.includes(\"vision\")) {\n    return \"Multimodal\";\n  }\n  if (id.includes(\"reasoning\") || id.includes(\"r1\") || name.includes(\"reasoning\") || name.includes(\"thinking\")) {\n    return \"Reasoning\";\n  }\n  if (id.includes(\"code\") || id.includes(\"coder\") || name.includes(\"code\")) {\n    return \"Coding\";\n  }\n  if (id.includes(\"flash\") || id.includes(\"nano\") || name.includes(\"fast\") || name.includes(\"speed\")) {\n    return \"Speed\";\n  }\n  if (id.includes(\"instruct\") || name.includes(\"instruct\")) {\n    return \"Instruction\";\n  }\n  if (id.includes(\"ultra\") || id.includes(\"large\") || id.includes(\"253b\") || id.includes(\"405b\")) {\n    return \"Large\";\n  }\n  return \"General\";\n}\n\n// Fetch truly free and working models from OpenRouter\nexport async function getFreeModels(apiKey: string): Promise<Array<{ id: string; name: string; category: string }>> {\n  if (!apiKey) {\n    throw new Error(\"API key is required\");\n  }\n\n  const keyHash = hashApiKey(apiKey);\n  const cached = modelCache.get(keyHash);\n  \n  // Return cached models if still valid for this API key\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    return cached.models;\n  }\n\n  try {\n    const allModels = await fetchOpenRouterModels(apiKey);\n    \n    // Filter for truly free models (pricing.prompt === \"0\")\n    const freeModels = allModels\n      .filter(model => {\n        const promptPrice = parseFloat(model.pricing.prompt);\n        const completionPrice = parseFloat(model.pricing.completion);\n        return promptPrice === 0 && completionPrice === 0;\n      })\n      .map(model => ({\n        id: model.id,\n        name: model.name,\n        category: categorizeModel(model),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n\n    // Cache the results for this API key\n    modelCache.set(keyHash, {\n      models: freeModels,\n      timestamp: Date.now(),\n    });\n\n    console.log(`✓ Found ${freeModels.length} free OpenRouter models`);\n    return freeModels;\n  } catch (error) {\n    console.error(\"Error fetching free models:\", error);\n    \n    // If API fails and we have cached data for this key, return it even if expired\n    if (cached) {\n      console.log(\"Using expired cache due to API error\");\n      return cached.models;\n    }\n    \n    // Last resort: return a minimal set of known working models\n    return [\n      { id: \"meta-llama/llama-3.3-70b-instruct:free\", name: \"Llama 3.3 70B\", category: \"Instruction\" },\n      { id: \"google/gemini-2.0-flash-exp:free\", name: \"Gemini 2.0 Flash\", category: \"Speed\" },\n    ];\n  }\n}\n\n// Check if a model ID is currently valid (exists in free models list)\n// Returns: true (valid), false (invalid), null (unable to verify)\nexport async function isValidModel(apiKey: string, modelId: string): Promise<boolean | null> {\n  try {\n    const freeModels = await getFreeModels(apiKey);\n    \n    // If we only got the fallback minimal list, we can't reliably validate\n    // Return null to indicate \"unknown\" status\n    if (freeModels.length <= 2) {\n      console.warn(\"Using minimal fallback models - cannot reliably validate\");\n      return null;\n    }\n    \n    return freeModels.some(model => model.id === modelId);\n  } catch (error) {\n    console.error(\"Error validating model:\", error);\n    return null; // Return null instead of false when validation fails\n  }\n}\n\nexport async function fetchOpenRouterModels(apiKey: string): Promise<OpenRouterModel[]> {\n  try {\n    const response = await fetch(`${OPENROUTER_API_URL}/models`, {\n      headers: {\n        \"Authorization\": `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenRouter API error: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.data || [];\n  } catch (error) {\n    console.error(\"Error fetching OpenRouter models:\", error);\n    throw error;\n  }\n}\n\nexport async function createChatCompletion(\n  apiKey: string,\n  request: ChatCompletionRequest\n): Promise<ChatCompletionResponse> {\n  try {\n    const response = await fetch(`${OPENROUTER_API_URL}/chat/completions`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\",\n        \"HTTP-Referer\": process.env.REPLIT_DOMAINS?.split(\",\")[0] || \"https://replit.com\",\n        \"X-Title\": \"AI Nexus\",\n      },\n      body: JSON.stringify(request),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(`OpenRouter API error: ${response.statusText} - ${JSON.stringify(errorData)}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error creating chat completion:\", error);\n    throw error;\n  }\n}\n\n// Execute team tasks in COLLABORATIVE mode (sequential, each bot sees previous outputs)\nexport async function executeCollaborativeTeamTasks(\n  apiKey: string,\n  brief: string,\n  delegations: Array<{ botId: string; botName: string; model: string; systemPrompt: string; task: string; temperature: number; maxTokens: number }>\n): Promise<Array<{ botId: string; botName: string; task: string; output: string; status: \"success\" | \"error\"; error?: string }>> {\n  const results: Array<{ botId: string; botName: string; task: string; output: string; status: \"success\" | \"error\"; error?: string }> = [];\n  const previousOutputs: Array<{ botName: string; task: string; output: string }> = [];\n\n  // Execute bots sequentially, each seeing previous outputs\n  for (const delegation of delegations) {\n    try {\n      const messages: ChatMessage[] = [];\n      \n      if (delegation.systemPrompt) {\n        messages.push({\n          role: \"system\",\n          content: delegation.systemPrompt,\n        });\n      }\n      \n      // Build context with brief and all previous bot outputs\n      let userMessage = `PROJECT BRIEF:\\n${brief}\\n\\nYOUR SPECIFIC TASK:\\n${delegation.task}\\n\\n`;\n      \n      if (previousOutputs.length > 0) {\n        userMessage += `PREVIOUS TEAM MEMBERS' WORK:\\n`;\n        userMessage += `(You can build upon, reference, or incorporate these outputs in your response)\\n\\n`;\n        \n        previousOutputs.forEach((prev, idx) => {\n          userMessage += `${idx + 1}. ${prev.botName} (${prev.task}):\\n${prev.output}\\n\\n`;\n        });\n        \n        userMessage += `---\\n\\nNow, complete YOUR task while considering the work done by your teammates above. You may reference, build upon, or synthesize their contributions as needed.\\n`;\n      } else {\n        userMessage += `You are the first team member to work on this project. Complete your task to set the foundation for the rest of the team.\\n`;\n      }\n      \n      messages.push({\n        role: \"user\",\n        content: userMessage,\n      });\n\n      const response = await createChatCompletion(apiKey, {\n        model: delegation.model,\n        messages,\n        temperature: delegation.temperature,\n        max_tokens: delegation.maxTokens,\n      });\n\n      const output = response.choices[0]?.message?.content || \"No response\";\n      \n      const result = {\n        botId: delegation.botId,\n        botName: delegation.botName,\n        task: delegation.task,\n        output,\n        status: \"success\" as const,\n      };\n      \n      results.push(result);\n      previousOutputs.push({\n        botName: delegation.botName,\n        task: delegation.task,\n        output,\n      });\n    } catch (error: any) {\n      const errorResult = {\n        botId: delegation.botId,\n        botName: delegation.botName,\n        task: delegation.task,\n        output: \"\",\n        status: \"error\" as const,\n        error: error?.message || \"Unknown error\",\n      };\n      \n      results.push(errorResult);\n      \n      // Add error to previous outputs so next bots know this one failed\n      previousOutputs.push({\n        botName: delegation.botName,\n        task: delegation.task,\n        output: `⚠️ Error: ${error?.message || \"Failed to complete task\"}`,\n      });\n    }\n  }\n\n  return results;\n}\n\n// Execute team tasks in PARALLEL mode (original behavior, for backward compatibility)\nexport async function executeTeamTasks(\n  apiKey: string,\n  brief: string,\n  delegations: Array<{ botId: string; botName: string; model: string; systemPrompt: string; task: string; temperature: number; maxTokens: number }>\n): Promise<Array<{ botId: string; botName: string; task: string; output: string; status: \"success\" | \"error\"; error?: string }>> {\n  const results = await Promise.allSettled(\n    delegations.map(async (delegation) => {\n      const messages: ChatMessage[] = [];\n      \n      if (delegation.systemPrompt) {\n        messages.push({\n          role: \"system\",\n          content: delegation.systemPrompt,\n        });\n      }\n      \n      messages.push({\n        role: \"user\",\n        content: `PROJECT BRIEF:\\n${brief}\\n\\nYOUR SPECIFIC TASK:\\n${delegation.task}\\n\\nPlease complete your assigned task based on the project brief above.`,\n      });\n\n      const response = await createChatCompletion(apiKey, {\n        model: delegation.model,\n        messages,\n        temperature: delegation.temperature,\n        max_tokens: delegation.maxTokens,\n      });\n\n      return {\n        botId: delegation.botId,\n        botName: delegation.botName,\n        task: delegation.task,\n        output: response.choices[0]?.message?.content || \"No response\",\n        status: \"success\" as const,\n      };\n    })\n  );\n\n  return results.map((result, index) => {\n    if (result.status === \"fulfilled\") {\n      return result.value;\n    } else {\n      return {\n        botId: delegations[index].botId,\n        botName: delegations[index].botName,\n        task: delegations[index].task,\n        output: \"\",\n        status: \"error\" as const,\n        error: result.reason?.message || \"Unknown error\",\n      };\n    }\n  });\n}\n","size_bytes":11676},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n  integer,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)]\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Bots table\nexport const bots = pgTable(\"bots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  model: varchar(\"model\", { length: 100 }).notNull(),\n  systemPrompt: text(\"system_prompt\"),\n  temperature: decimal(\"temperature\", { precision: 3, scale: 2 }).default(\"0.7\"),\n  maxTokens: integer(\"max_tokens\").default(1000),\n  role: varchar(\"role\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertBotSchema = createInsertSchema(bots).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateBotSchema = insertBotSchema.omit({ userId: true }).partial();\n\nexport type InsertBot = z.infer<typeof insertBotSchema>;\nexport type UpdateBot = z.infer<typeof updateBotSchema>;\nexport type Bot = typeof bots.$inferSelect;\n\n// Teams table\nexport const teams = pgTable(\"teams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertTeamSchema = createInsertSchema(teams).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateTeamSchema = insertTeamSchema.omit({ userId: true }).partial();\n\nexport type InsertTeam = z.infer<typeof insertTeamSchema>;\nexport type UpdateTeam = z.infer<typeof updateTeamSchema>;\nexport type Team = typeof teams.$inferSelect;\n\n// Team members table (many-to-many relationship between teams and bots)\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id, { onDelete: \"cascade\" }),\n  botId: varchar(\"bot_id\").notNull().references(() => bots.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertTeamMember = z.infer<typeof insertTeamMemberSchema>;\nexport type TeamMember = typeof teamMembers.$inferSelect;\n\n// Outputs table (saved conversations/results)\nexport const outputs = pgTable(\"outputs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  teamId: varchar(\"team_id\").references(() => teams.id, { onDelete: \"set null\" }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  brief: text(\"brief\").notNull(),\n  delegations: jsonb(\"delegations\").notNull(), // Array of {botId, task}\n  combinedOutput: text(\"combined_output\"),\n  responses: jsonb(\"responses\").notNull(), // Array of {botId, botName, task, output, status}\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertOutputSchema = createInsertSchema(outputs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertOutput = z.infer<typeof insertOutputSchema>;\nexport type Output = typeof outputs.$inferSelect;\n\n// Conversations table (chat sessions with individual bots or teams)\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  botId: varchar(\"bot_id\").references(() => bots.id, { onDelete: \"cascade\" }),\n  teamId: varchar(\"team_id\").references(() => teams.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\n\n// Messages table (individual messages within conversations)\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull().references(() => conversations.id, { onDelete: \"cascade\" }),\n  role: varchar(\"role\", { length: 20 }).notNull(), // 'user', 'assistant', 'system'\n  content: text(\"content\").notNull(),\n  botId: varchar(\"bot_id\").references(() => bots.id, { onDelete: \"set null\" }), // For team conversations, which bot responded\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n\n// Team collaborative sessions table (multi-phase workflow: planning → execution → review)\nexport const teamSessions = pgTable(\"team_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  brief: text(\"brief\").notNull(),\n  phase: varchar(\"phase\", { length: 20 }).notNull().default(\"planning\"), // planning | execution | review | completed\n  planningMessages: jsonb(\"planning_messages\").default([]), // Array of {speaker: 'bot'|'user', botId?, botName?, content, timestamp}\n  taskAssignments: jsonb(\"task_assignments\").default([]), // Array of {botId, botName, task} determined during planning\n  executionOutputs: jsonb(\"execution_outputs\").default([]), // Array of {botId, botName, task, output, status}\n  reviewMessages: jsonb(\"review_messages\").default([]), // Array of {speaker: 'bot'|'user', botId?, botName?, content, timestamp}\n  suggestions: jsonb(\"suggestions\").default([]), // Array of {id, botId, botName, type: 'iteration'|'critique', target?, content, status: 'pending'|'approved'|'rejected'}\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertTeamSessionSchema = createInsertSchema(teamSessions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateTeamSessionSchema = insertTeamSessionSchema.partial();\n\nexport type InsertTeamSession = z.infer<typeof insertTeamSessionSchema>;\nexport type UpdateTeamSession = z.infer<typeof updateTeamSessionSchema>;\nexport type TeamSession = typeof teamSessions.$inferSelect;\n","size_bytes":7974},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/CreateTeam.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Users, Bot, Check } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertTeamSchema, type Bot as BotType } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst formSchema = insertTeamSchema.omit({ userId: true }).extend({\n  description: z.string().optional(),\n  botIds: z.array(z.string()).min(1, \"Select at least one bot\"),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport default function CreateTeam() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [selectedBots, setSelectedBots] = useState<string[]>([]);\n\n  const { data: bots = [], isLoading } = useQuery<BotType[]>({\n    queryKey: [\"/api/bots\"],\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      description: undefined,\n      botIds: [],\n    },\n  });\n\n  const createTeamMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await apiRequest(\"POST\", \"/api/teams\", data);\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to create team: ${errorText}`);\n      }\n      return await response.json();\n    },\n    onSuccess: (team) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\"] });\n      toast({\n        title: \"Success\",\n        description: \"Team created successfully!\",\n      });\n      navigate(`/teams/${team.id}`);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    createTeamMutation.mutate({ ...data, botIds: selectedBots });\n  };\n\n  const toggleBot = (botId: string) => {\n    setSelectedBots(prev =>\n      prev.includes(botId) ? prev.filter(id => id !== botId) : [...prev, botId]\n    );\n    form.setValue(\"botIds\", selectedBots.includes(botId) ? selectedBots.filter(id => id !== botId) : [...selectedBots, botId]);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading bots...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full overflow-auto\">\n      <div className=\"max-w-5xl mx-auto p-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <div className=\"w-12 h-12 rounded-xl bg-primary/10 flex items-center justify-center\">\n              <Users className=\"h-6 w-6 text-primary\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold\">Create AI Team</h1>\n              <p className=\"text-muted-foreground\">Select bots to collaborate on projects</p>\n            </div>\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Team Details</CardTitle>\n                <CardDescription>Give your team a name and purpose</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Team Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Content Creation Team, Development Squad\" {...field} data-testid=\"input-team-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Describe what this team will work on...\" {...field} data-testid=\"input-team-description\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Select Team Members</CardTitle>\n                <CardDescription>\n                  {bots.length === 0 ? \"Create some bots first to add them to your team\" : \"Choose which bots will be part of this team\"}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {bots.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"w-16 h-16 rounded-lg bg-muted flex items-center justify-center mx-auto mb-4\">\n                      <Bot className=\"h-8 w-8 text-muted-foreground\" />\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-4\">No bots available</p>\n                    <Button type=\"button\" onClick={() => navigate(\"/bots/create\")}>\n                      Create a Bot\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {bots.map((bot) => {\n                      const isSelected = selectedBots.includes(bot.id);\n                      return (\n                        <div\n                          key={bot.id}\n                          onClick={() => toggleBot(bot.id)}\n                          className={`p-4 rounded-lg border-2 cursor-pointer transition-all hover-elevate ${\n                            isSelected ? \"border-primary bg-primary/5\" : \"border-border\"\n                          }`}\n                          data-testid={`bot-select-${bot.id}`}\n                        >\n                          <div className=\"flex items-start gap-3\">\n                            <div className={`w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0 ${\n                              isSelected ? \"bg-primary text-primary-foreground\" : \"bg-muted\"\n                            }`}>\n                              {isSelected ? (\n                                <Check className=\"h-5 w-5\" />\n                              ) : (\n                                <Bot className=\"h-5 w-5\" />\n                              )}\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-semibold mb-1\">{bot.name}</h4>\n                              {bot.role && (\n                                <p className=\"text-xs text-muted-foreground mb-1\">{bot.role}</p>\n                              )}\n                              {bot.description && (\n                                <p className=\"text-sm text-muted-foreground line-clamp-2\">{bot.description}</p>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n                <FormMessage>{form.formState.errors.botIds?.message}</FormMessage>\n              </CardContent>\n            </Card>\n\n            <div className=\"flex gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => navigate(\"/teams\")}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createTeamMutation.isPending || selectedBots.length === 0}\n                data-testid=\"button-create-team\"\n                className=\"gap-2\"\n              >\n                {createTeamMutation.isPending ? (\n                  <>Creating...</>\n                ) : (\n                  <>\n                    <Users className=\"h-4 w-4\" />\n                    Create Team\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9135},"client/src/components/examples/CTASection.tsx":{"content":"import { CTASection } from '../CTASection';\n\nexport default function CTASectionExample() {\n  return <CTASection />;\n}\n","size_bytes":118},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/TeamCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Users, Play, Edit } from \"lucide-react\";\n\ninterface TeamMember {\n  name: string;\n  initials: string;\n}\n\ninterface TeamCardProps {\n  name: string;\n  members: TeamMember[];\n  description: string;\n  onStart?: () => void;\n  onEdit?: () => void;\n}\n\nexport function TeamCard({ name, members, description, onStart, onEdit }: TeamCardProps) {\n  const handleStart = () => {\n    console.log(\"Start team:\", name);\n    onStart?.();\n  };\n\n  const handleEdit = () => {\n    console.log(\"Edit team:\", name);\n    onEdit?.();\n  };\n\n  return (\n    <Card className=\"hover-elevate\" data-testid=\"card-team\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n              <Users className=\"h-5 w-5 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold\" data-testid=\"text-team-name\">{name}</h3>\n              <p className=\"text-xs text-muted-foreground\">{members.length} members</p>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pb-3\">\n        <p className=\"text-sm text-muted-foreground mb-3\" data-testid=\"text-description\">{description}</p>\n        <div className=\"flex -space-x-2\">\n          {members.slice(0, 5).map((member, index) => (\n            <Avatar key={index} className=\"border-2 border-card w-8 h-8\" data-testid={`avatar-member-${index}`}>\n              <AvatarFallback className=\"text-xs\">{member.initials}</AvatarFallback>\n            </Avatar>\n          ))}\n          {members.length > 5 && (\n            <Avatar className=\"border-2 border-card w-8 h-8\">\n              <AvatarFallback className=\"text-xs\">+{members.length - 5}</AvatarFallback>\n            </Avatar>\n          )}\n        </div>\n      </CardContent>\n      \n      <CardFooter className=\"pt-3 border-t gap-2\">\n        <Button\n          size=\"sm\"\n          onClick={handleStart}\n          data-testid=\"button-start\"\n        >\n          <Play className=\"h-4 w-4 mr-1\" />\n          Start\n        </Button>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleEdit}\n          data-testid=\"button-edit\"\n        >\n          <Edit className=\"h-4 w-4 mr-1\" />\n          Edit\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":2626},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"design_guidelines.md":{"content":"# Design Guidelines: AI Nexus Multi-Model Collaboration Platform\n\n## Design Approach\n\n**Selected System**: Linear + Vercel hybrid aesthetic with Stripe's restraint\n\n**Justification**: AI Nexus demands exceptional information density management with a premium, trustworthy appearance. Linear's typography and spacing principles combine with Vercel's futuristic polish and Stripe's confident simplicity to create an interface that communicates technical sophistication while remaining highly functional.\n\n**Core Principles**:\n- Trust through restraint and precision\n- Information clarity as visual sophistication\n- Premium feel through purposeful spacing and typography\n- Cutting-edge aesthetic without gimmicks\n- Functional beauty for complex workflows\n\n---\n\n## Color System\n\n**Primary Palette**:\n- **Deep Professional Blue**: #0A2540 (primary text, headers, key UI)\n- **Trust Blue**: #1E40AF (primary actions, links, active states)\n- **Ocean Depth**: #0F172A (backgrounds, containers)\n\n**Neutrals**:\n- **Pure White**: #FFFFFF (backgrounds, cards)\n- **Soft Gray**: #F8FAFC (subtle backgrounds)\n- **Border Gray**: #E2E8F0 (dividers, borders)\n- **Text Gray**: #64748B (secondary text)\n- **Deep Gray**: #334155 (tertiary elements)\n\n**Accents**:\n- **Electric Cyan**: #06B6D4 (success, highlights)\n- **Amber**: #F59E0B (warnings, attention)\n- **Slate Purple**: #8B5CF6 (premium features, badges)\n\n**Semantic Colors**:\n- Success: #10B981\n- Error: #EF4444\n- Warning: #F59E0B\n- Info: #3B82F6\n\n**Application**:\n- Light mode default with option for dark mode\n- High contrast ratios (4.5:1 minimum for text)\n- Subtle gradients only for CTAs and hero backgrounds (blue → purple)\n\n---\n\n## Typography System\n\n**Primary Font**: Inter (Google Fonts, weights: 400, 500, 600, 700)\n**Secondary Font**: JetBrains Mono (Google Fonts, weights: 400, 500) for code/model identifiers\n\n**Type Scale**:\n- Display: text-7xl, font-weight 700, tracking-tight, Deep Professional Blue\n- Hero Headline: text-6xl, font-weight 700, tracking-tight\n- Page Title: text-4xl, font-weight 600, Deep Professional Blue\n- Section Header: text-3xl, font-weight 600\n- Card Title: text-xl, font-weight 600\n- Body Large: text-lg, font-weight 400, leading-relaxed\n- Body: text-base, font-weight 400, leading-normal\n- Small: text-sm, font-weight 400\n- Caption: text-xs, font-weight 500, tracking-wide, uppercase, Text Gray\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Tailwind units of 2, 4, 6, 8, 12, 16, 24\n\n**Common Patterns**:\n- Card padding: p-6 to p-8\n- Section spacing: py-16 to py-32\n- Grid gaps: gap-6 to gap-8\n- Vertical rhythm: mb-4, mb-6, mb-8\n\n**Container Strategy**:\n- Maximum width: max-w-7xl mx-auto px-6\n- Dashboard content: max-w-screen-xl\n- Reading content: max-w-4xl\n- Sidebar: w-72 fixed\n\n---\n\n## Landing Page Layout\n\n**Hero Section** (min-h-screen with gradient background):\n- Full-width image: Futuristic AI collaboration network visualization (interconnected neural nodes, data streams, holographic interface elements)\n- Image treatment: Deep blue gradient overlay (from transparent to #0A2540 at 60% opacity) for text contrast\n- Content: Centered max-w-5xl\n  - Display headline (text-7xl) + subheadline (text-2xl, Text Gray)\n  - Dual CTAs: Primary (blurred background backdrop-blur-md bg-Trust Blue/20 border border-white/20) + Secondary outlined\n  - Trust indicator below: \"Trusted by 5,000+ AI teams worldwide\" with company logo strip\n\n**Enterprise Feature Grid** (py-24):\n- 3-column grid (grid-cols-1 md:grid-cols-3 gap-8)\n- Each feature card:\n  - Icon (Electric Cyan glow effect)\n  - Title (text-2xl font-semibold)\n  - Description (text-lg Text Gray)\n  - Micro-stat (e.g., \"50+ AI models supported\")\n\n**Workflow Visualization** (py-32, Soft Gray background):\n- Horizontal stepper showing: Configure Bots → Assemble Team → Submit Brief → Multi-View Analysis → Refine & Export\n- Each step: Numbered badge + title + description + connecting animated line\n- Screenshot of actual interface at each step\n\n**Social Proof** (py-20):\n- 2-column layout\n- Left: Large testimonial with avatar, quote, name, title, company\n- Right: Grid of 4 smaller testimonials (2x2)\n\n**Pricing/CTA Section** (py-24):\n- Centered content with strong headline\n- 3-tier pricing cards with feature comparison\n- Primary CTA: \"Start Free Trial\"\n\n**Footer** (py-16, Ocean Depth background, white text):\n- 5-column grid: Product, Solutions, Resources, Company, Legal\n- Newsletter signup with input + button\n- Social links + trust badges\n- Copyright with \"Powered by OpenRouter\" badge\n\n---\n\n## Dashboard Layout\n\n**Structure**: Fixed sidebar (w-72) + top bar (h-16) + main content\n\n**Sidebar**:\n- Logo + \"AI Nexus\" wordmark (p-6)\n- Navigation groups with dividers:\n  - **Workspace**: Dashboard, Library, Teams\n  - **Creation**: New Bot, New Team, History\n  - **Settings**: Profile, API Keys, Billing\n- User profile card at bottom: Avatar + name + plan badge + dropdown\n\n**Top Bar**:\n- Breadcrumbs (left)\n- Global search (center, w-96)\n- Notifications + quick actions + user menu (right)\n\n**Main Content**:\n- Dashboard Overview: 4 stat cards (grid-cols-4 gap-6) showing Bots Created, Teams Active, Outputs Generated, API Calls This Month\n- Quick Actions panel (mb-8): \"Create Bot\" + \"Build Team\" + \"Import Configuration\" buttons\n- Recent Activity (2-column grid):\n  - Left: Active Teams list (cards with avatar stack + team name + last activity)\n  - Right: Recent Outputs (cards with brief preview + timestamp + team badge)\n\n---\n\n## Bot Configuration Page\n\n**Split Layout** (60/40):\n- **Left Panel**: Configuration form with sections (space-y-8)\n  - Bot Profile: Name input, description textarea, avatar upload\n  - Model Selection: Dropdown with model cards showing specs (GPT-4, Claude, Gemini, etc.)\n  - System Prompt: Large textarea (min-h-48) with JetBrains Mono font\n  - Parameters: Sliders for temperature, max tokens, top-p with live value display\n  - Capabilities: Multi-select tags (vision, code, analysis, creative writing)\n  \n- **Right Panel** (sticky): Live preview card showing bot appearance + test conversation interface\n  - Preview updates in real-time as user configures\n\n**Bot Library View**:\n- Grid layout (grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6)\n- Filterable header with search + model filter + sort dropdown\n- Each bot card: Avatar + name + model badge (Slate Purple) + capability tags + action menu\n\n---\n\n## Team Builder Page\n\n**Three-Section Layout**:\n- **Available Bots Sidebar** (w-80, left): Searchable list with bot cards (compact view)\n- **Team Canvas** (center): Drag-drop zone or multi-select interface showing selected bots as cards with role assignments\n- **Configuration Panel** (w-96, right): Team name, description, collaboration mode (sequential/parallel/debate), output merging preferences\n\n**Team Display**: Cards arranged showing interaction flow with connecting lines indicating sequence\n\n---\n\n## Brief Submission & Multi-View Output\n\n**Input Section** (sticky top, bg-white shadow):\n- Team indicator bar showing active members (avatar stack + team name)\n- Large textarea for brief (min-h-40) with rich formatting toolbar\n- Submit button + advanced options dropdown\n\n**Output Display**:\n- **Tab Navigation**: Combined View | Individual Outputs | Side-by-Side | Consensus Analysis\n- **Combined View**: Single prose-styled column (max-w-4xl) with merged output\n- **Individual Outputs**: Grid (grid-cols-1 lg:grid-cols-2 gap-6)\n  - Each card: Bot header (avatar + name + model) + formatted response + action buttons (copy, iterate, save)\n- **Side-by-Side**: Table format with synchronized scrolling\n- **Consensus Analysis**: AI-generated summary highlighting agreements/disagreements\n\n**Action Bar** (sticky bottom):\n- Save to Library + Export (PDF/Markdown) + Share + Iterate buttons\n- Follow-up prompt input (collapsed by default)\n\n---\n\n## Component Specifications\n\n**Cards**: rounded-xl border border-Border Gray bg-white shadow-sm hover:shadow-md transition, p-6\n\n**Buttons**:\n- Primary: bg-Trust Blue text-white rounded-lg px-6 py-3 font-semibold\n- Secondary: border-2 border-Trust Blue text-Trust Blue rounded-lg px-6 py-3 font-semibold\n- Tertiary: text-Trust Blue font-semibold hover:underline\n- On images: backdrop-blur-md bg-white/10 border border-white/20 text-white\n\n**Inputs**: border border-Border Gray rounded-lg px-4 py-3 focus:ring-2 focus:ring-Trust Blue\n\n**Badges**: \n- Model: bg-Slate Purple/10 text-Slate Purple px-3 py-1 rounded-full text-xs font-medium\n- Status: bg-Electric Cyan/10 text-Electric Cyan px-2 py-1 rounded text-xs\n\n**Modals**: Centered card max-w-2xl bg-white rounded-2xl shadow-2xl p-8 with backdrop blur\n\n---\n\n## Images\n\n**Hero Image**: Required - Full-width abstract AI network visualization\n- Style: Futuristic, interconnected nodes, holographic data streams, neural pathways\n- Colors: Deep blues, cyans, purples with glowing elements\n- Treatment: Gradient overlay for text readability\n- Placement: Full background with centered content overlay\n\n**Empty States**: Minimal line-art illustrations in Electric Cyan\n- No bots: Bot creation graphic\n- No teams: Team collaboration graphic\n- No outputs: Data visualization graphic\n\n**Bot Avatars**: Geometric patterns or AI-generated abstract representations consistent with brand colors\n\n---\n\n## Animation\n\n**Minimal, purposeful only**:\n- Card hover: translate-y-[-2px] shadow-lg\n- Button hover: opacity-90\n- Modal: Fade + slide-up\n- Loading: Subtle pulse on skeleton screens\n- NO scroll animations or parallax","size_bytes":9492},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Sparkles } from \"lucide-react\";\nimport heroImage from \"@assets/generated_images/AI_collaboration_hero_image_a6163807.png\";\n\nexport function HeroSection() {\n  const handleGetStarted = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  const handleLearnMore = () => {\n    document.getElementById(\"features\")?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <section className=\"relative min-h-screen max-h-[800px] flex items-center justify-center overflow-hidden\">\n      <div\n        className=\"absolute inset-0 bg-cover bg-center\"\n        style={{ backgroundImage: `url(${heroImage})` }}\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 via-black/60 to-black/80\" />\n      </div>\n      \n      <div className=\"relative z-10 max-w-4xl mx-auto px-4 sm:px-6 text-center\">\n        <div className=\"inline-flex items-center gap-2 px-3 sm:px-4 py-2 rounded-full bg-primary/10 backdrop-blur-sm border border-primary/20 mb-6 sm:mb-8\">\n          <Sparkles className=\"h-4 w-4 text-primary-foreground\" />\n          <span className=\"text-xs sm:text-sm font-medium text-primary-foreground\">Powered by OpenRouter AI</span>\n        </div>\n        \n        <h1 className=\"text-3xl sm:text-5xl md:text-6xl font-bold mb-4 sm:mb-6 text-white tracking-tight leading-tight\">\n          Multi-Model AI Collaboration\n          <br />\n          <span className=\"text-primary-foreground\">Built for Teams</span>\n        </h1>\n        \n        <p className=\"text-base sm:text-xl leading-relaxed text-white/90 mb-8 sm:mb-10 max-w-2xl mx-auto\">\n          Create AI bot teams that work together simultaneously. Build, deploy, and iterate with multiple AI models collaborating on your projects in real-time.\n        </p>\n        \n        <div className=\"flex flex-col sm:flex-row items-center justify-center gap-3 sm:gap-4\">\n          <Button\n            size=\"lg\"\n            className=\"backdrop-blur-sm w-full sm:w-auto\"\n            onClick={handleGetStarted}\n            data-testid=\"button-hero-get-started\"\n          >\n            Get Started\n            <ArrowRight className=\"ml-2 h-5 w-5\" />\n          </Button>\n          <Button\n            size=\"lg\"\n            variant=\"outline\"\n            className=\"backdrop-blur-sm bg-background/20 border-white/30 text-white hover:bg-background/30 w-full sm:w-auto\"\n            onClick={handleLearnMore}\n            data-testid=\"button-learn-more\"\n          >\n            Learn More\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2585},"client/src/pages/BotsManagement.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Bot, Plus, Trash2, MessageSquare, Sparkles, AlertTriangle, Settings, Zap } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Bot as BotType } from \"@shared/schema\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { ChatInterface } from \"@/components/ChatInterface\";\n\nexport default function BotsManagement() {\n  const { toast } = useToast();\n  const [chatBotId, setChatBotId] = useState<string | null>(null);\n  const [chatBotName, setChatBotName] = useState<string>(\"\");\n  const [activeConversationId, setActiveConversationId] = useState<string | undefined>(undefined);\n\n  const { data: bots = [], isLoading } = useQuery<Array<BotType & { modelValid?: boolean }>>({\n    queryKey: [\"/api/bots\"],\n  });\n\n  const { data: botConversations = [] } = useQuery<Array<{ id: string; botId: string; createdAt: string }>>({\n    queryKey: [\"/api/conversations\", { botId: chatBotId }],\n    enabled: !!chatBotId,\n  });\n\n  useEffect(() => {\n    if (botConversations.length > 0) {\n      setActiveConversationId(botConversations[0].id);\n    } else {\n      setActiveConversationId(undefined);\n    }\n  }, [botConversations]);\n\n  const deleteBotMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/bots/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bots\"] });\n      toast({\n        title: \"Success\",\n        description: \"Bot deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-muted/30\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground font-medium\">Loading your AI bots...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-muted/30\">\n      {/* Hero Header */}\n      <div className=\"border-b bg-card\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-6 sm:py-8\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-xl bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <Bot className=\"h-5 w-5 sm:h-6 sm:w-6 text-primary\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl sm:text-3xl font-bold tracking-tight\">AI Bot Library</h1>\n                  <p className=\"text-sm sm:text-base text-muted-foreground hidden sm:block\">Configure and manage your AI assistant collection</p>\n                </div>\n              </div>\n            </div>\n            <Link href=\"/bots/create\" className=\"w-full sm:w-auto\">\n              <Button size=\"lg\" className=\"gap-2 shadow-sm w-full sm:w-auto\" data-testid=\"button-create-new-bot\">\n                <Plus className=\"h-5 w-5\" />\n                Create New Bot\n              </Button>\n            </Link>\n          </div>\n\n          {/* Stats Bar */}\n          <div className=\"mt-4 sm:mt-6 flex flex-wrap items-center gap-4 sm:gap-6 text-xs sm:text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 rounded-full bg-primary\"></div>\n              <span className=\"text-muted-foreground\">Total Bots:</span>\n              <span className=\"font-semibold\">{bots.length}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 rounded-full bg-success\"></div>\n              <span className=\"text-muted-foreground\">Active:</span>\n              <span className=\"font-semibold\">{bots.filter(b => b.modelValid !== false).length}</span>\n            </div>\n            {bots.some(b => b.modelValid === false) && (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 rounded-full bg-destructive\"></div>\n                <span className=\"text-muted-foreground\">Needs Attention:</span>\n                <span className=\"font-semibold\">{bots.filter(b => b.modelValid === false).length}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-6 sm:py-8\">\n        {bots.length === 0 ? (\n          <Card className=\"border-dashed border-2\">\n            <CardContent className=\"py-16 text-center\">\n              <div className=\"w-20 h-20 rounded-2xl bg-primary/10 flex items-center justify-center mx-auto mb-6\">\n                <Bot className=\"h-10 w-10 text-primary\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-2\">No AI bots yet</h3>\n              <p className=\"text-muted-foreground mb-8 max-w-md mx-auto\">\n                Create your first AI bot to get started. Configure it with specific models, \n                system prompts, and parameters tailored to your needs.\n              </p>\n              <Link href=\"/bots/create\">\n                <Button size=\"lg\" className=\"gap-2\">\n                  <Plus className=\"h-5 w-5\" />\n                  Create Your First Bot\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {bots.map((bot) => (\n              <Card \n                key={bot.id} \n                className=\"hover-elevate border-border/50 overflow-hidden group\" \n                data-testid={`card-bot-${bot.id}`}\n              >\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-start justify-between gap-3 mb-3\">\n                    <div className=\"w-14 h-14 rounded-xl bg-gradient-primary flex items-center justify-center flex-shrink-0 shadow-sm\">\n                      <Bot className=\"h-7 w-7 text-primary-foreground\" />\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            data-testid={`button-delete-bot-${bot.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-muted-foreground\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete AI Bot</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete \"<strong>{bot.name}</strong>\"? \n                              This will remove all associated conversations and cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => deleteBotMutation.mutate(bot.id)}\n                              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                            >\n                              Delete Bot\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n\n                  <CardTitle className=\"text-xl mb-2\">{bot.name}</CardTitle>\n                  \n                  <div className=\"flex items-center gap-2 flex-wrap\">\n                    {bot.role && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {bot.role}\n                      </Badge>\n                    )}\n                    {bot.modelValid === false && (\n                      <Badge variant=\"destructive\" className=\"text-xs gap-1\" data-testid={`badge-invalid-${bot.id}`}>\n                        <AlertTriangle className=\"h-3 w-3\" />\n                        Unavailable\n                      </Badge>\n                    )}\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"space-y-4\">\n                  {/* Model Warning */}\n                  {bot.modelValid === false && (\n                    <div \n                      className=\"p-3 rounded-lg bg-destructive/5 border border-destructive/20\" \n                      data-testid={`alert-invalid-${bot.id}`}\n                    >\n                      <div className=\"flex gap-2\">\n                        <AlertTriangle className=\"h-4 w-4 text-destructive shrink-0 mt-0.5\" />\n                        <div className=\"text-xs space-y-1\">\n                          <p className=\"font-semibold text-destructive\">Model No Longer Available</p>\n                          <p className=\"text-muted-foreground\">\n                            This model is not accessible. Please create a new bot with an active model.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Description */}\n                  {bot.description && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2 leading-relaxed\">\n                      {bot.description}\n                    </p>\n                  )}\n                  \n                  {/* Model Badge */}\n                  <div className=\"flex items-center gap-2 p-3 rounded-lg bg-muted/50 border border-border/50\">\n                    <Sparkles className=\"h-4 w-4 text-accent flex-shrink-0\" />\n                    <span className=\"text-sm font-medium truncate font-mono\">\n                      {bot.model.split(\"/\")[1]?.replace(\":free\", \"\") || bot.model}\n                    </span>\n                  </div>\n\n                  {/* Parameters */}\n                  <div className=\"pt-3 border-t border-border/50 space-y-2\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground flex items-center gap-2\">\n                        <Zap className=\"h-3 w-3\" />\n                        Temperature\n                      </span>\n                      <span className=\"font-mono font-medium\">{bot.temperature}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground flex items-center gap-2\">\n                        <Settings className=\"h-3 w-3\" />\n                        Max Tokens\n                      </span>\n                      <span className=\"font-mono font-medium\">{bot.maxTokens}</span>\n                    </div>\n                  </div>\n\n                  {/* Chat Button */}\n                  <Button\n                    className=\"w-full gap-2\"\n                    variant={bot.modelValid === false ? \"outline\" : \"default\"}\n                    onClick={() => {\n                      setChatBotId(bot.id);\n                      setChatBotName(bot.name);\n                    }}\n                    disabled={bot.modelValid === false}\n                    data-testid={`button-chat-bot-${bot.id}`}\n                  >\n                    <MessageSquare className=\"h-4 w-4\" />\n                    {bot.modelValid === false ? \"Unavailable\" : \"Start Conversation\"}\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Chat Dialog */}\n      <Dialog open={chatBotId !== null} onOpenChange={(open) => !open && setChatBotId(null)}>\n        <DialogContent className=\"max-w-4xl h-[80vh] sm:h-[700px] flex flex-col p-0 gap-0\">\n          <DialogHeader className=\"px-6 pt-6 pb-4 border-b\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Bot className=\"h-5 w-5 text-primary\" />\n              </div>\n              <div>\n                <DialogTitle className=\"text-xl\">Chat with {chatBotName}</DialogTitle>\n                <p className=\"text-sm text-muted-foreground\">AI-powered conversation</p>\n              </div>\n            </div>\n          </DialogHeader>\n          <div className=\"flex-1 overflow-hidden px-6 pb-6\">\n            {chatBotId && (\n              <ChatInterface\n                title={chatBotName}\n                chatType=\"bot\"\n                entityId={chatBotId}\n                conversationId={activeConversationId}\n                onConversationCreated={setActiveConversationId}\n              />\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":14006},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* PROFESSIONAL COLOR SYSTEM - Trust Blues & Clean Neutrals */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  /* Base colors - Clean & Minimal */\n  --background: 0 0% 100%;\n  --foreground: 215 25% 27%;\n\n  /* Borders - Subtle and refined */\n  --border: 214 32% 91%;\n\n  /* Cards - Pure white with subtle elevation */\n  --card: 0 0% 100%;\n  --card-foreground: 215 25% 27%;\n  --card-border: 214 32% 91%;\n\n  /* Sidebar - Professional blue-gray */\n  --sidebar: 210 40% 98%;\n  --sidebar-foreground: 215 25% 27%;\n  --sidebar-border: 214 32% 91%;\n  --sidebar-primary: 224 76% 40%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 214 32% 91%;\n  --sidebar-accent-foreground: 215 25% 27%;\n  --sidebar-ring: 224 76% 40%;\n\n  /* Popovers */\n  --popover: 0 0% 100%;\n  --popover-foreground: 215 25% 27%;\n  --popover-border: 214 32% 91%;\n\n  /* Primary - Trust Blue */\n  --primary: 224 76% 40%;\n  --primary-foreground: 0 0% 100%;\n\n  /* Secondary - Clean neutral */\n  --secondary: 210 40% 96%;\n  --secondary-foreground: 215 25% 27%;\n\n  /* Muted - Subtle backgrounds */\n  --muted: 210 40% 98%;\n  --muted-foreground: 215 16% 47%;\n\n  /* Accent - Electric Cyan for highlights */\n  --accent: 187 95% 43%;\n  --accent-foreground: 0 0% 100%;\n\n  /* Destructive - Clear error red */\n  --destructive: 0 72% 60%;\n  --destructive-foreground: 0 0% 100%;\n\n  /* Success - Clean green */\n  --success: 160 84% 39%;\n  --success-foreground: 0 0% 100%;\n\n  /* Warning - Amber attention */\n  --warning: 38 92% 50%;\n  --warning-foreground: 0 0% 100%;\n\n  /* Form inputs */\n  --input: 214 32% 91%;\n  --ring: 224 76% 40%;\n\n  /* Charts - Professional palette */\n  --chart-1: 224 76% 40%;\n  --chart-2: 258 90% 66%;\n  --chart-3: 187 95% 43%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 160 84% 39%;\n\n  /* Typography */\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n\n  /* Radius - Refined corners */\n  --radius: .75rem; /* 12px for modern look */\n\n  /* Shadows - Subtle and professional */\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 47% 11% / 0.03);\n  --shadow-xs: 0px 1px 2px 0px hsl(222 47% 11% / 0.04);\n  --shadow-sm: 0px 1px 3px 0px hsl(222 47% 11% / 0.06), 0px 1px 2px -1px hsl(222 47% 11% / 0.04);\n  --shadow: 0px 1px 3px 0px hsl(222 47% 11% / 0.08), 0px 1px 2px -1px hsl(222 47% 11% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(222 47% 11% / 0.07), 0px 2px 4px -2px hsl(222 47% 11% / 0.05);\n  --shadow-lg: 0px 10px 15px -3px hsl(222 47% 11% / 0.08), 0px 4px 6px -4px hsl(222 47% 11% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(222 47% 11% / 0.08), 0px 8px 10px -6px hsl(222 47% 11% / 0.05);\n  --shadow-2xl: 0px 25px 50px -12px hsl(222 47% 11% / 0.15);\n\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders */\n  \n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n/* DARK MODE - Professional Ocean Depth Theme */\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;\n\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n  --foreground: 0 0% 98%;\n\n  --border: 215 25% 20%;\n\n  --card: 222 47% 13%;\n  --card-foreground: 0 0% 98%;\n  --card-border: 215 25% 20%;\n\n  --sidebar: 222 47% 15%;\n  --sidebar-foreground: 0 0% 98%;\n  --sidebar-border: 215 25% 20%;\n  --sidebar-primary: 224 76% 40%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 215 25% 20%;\n  --sidebar-accent-foreground: 0 0% 90%;\n  --sidebar-ring: 224 76% 40%;\n\n  --popover: 222 47% 13%;\n  --popover-foreground: 0 0% 98%;\n  --popover-border: 215 25% 20%;\n\n  --primary: 224 76% 40%;\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 215 25% 20%;\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 222 47% 15%;\n  --muted-foreground: 215 16% 68%;\n\n  --accent: 187 95% 43%;\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 72% 60%;\n  --destructive-foreground: 0 0% 100%;\n\n  --success: 160 84% 39%;\n  --success-foreground: 0 0% 100%;\n\n  --warning: 38 92% 50%;\n  --warning-foreground: 0 0% 100%;\n\n  --input: 215 25% 20%;\n  --ring: 224 76% 40%;\n\n  --chart-1: 224 76% 60%;\n  --chart-2: 258 90% 70%;\n  --chart-3: 187 95% 55%;\n  --chart-4: 38 92% 60%;\n  --chart-5: 160 84% 50%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.30);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.40);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.50), 0px 1px 2px -1px hsl(0 0% 0% / 0.50);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.55), 0px 1px 2px -1px hsl(0 0% 0% / 0.55);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.50), 0px 2px 4px -2px hsl(0 0% 0% / 0.50);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.50), 0px 4px 6px -4px hsl(0 0% 0% / 0.50);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.50), 0px 8px 10px -6px hsl(0 0% 0% / 0.50);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.60);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Professional typography improvements */\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold tracking-tight;\n  }\n\n  h1 {\n    @apply text-4xl lg:text-5xl;\n  }\n\n  h2 {\n    @apply text-3xl lg:text-4xl;\n  }\n\n  h3 {\n    @apply text-2xl lg:text-3xl;\n  }\n\n  h4 {\n    @apply text-xl lg:text-2xl;\n  }\n\n  /* Improve input and button focus states */\n  input:focus-visible,\n  textarea:focus-visible,\n  select:focus-visible,\n  button:focus-visible {\n    @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .no-default-hover-elevate {}\n  .no-default-active-elevate {}\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Professional gradient utilities */\n  .gradient-primary {\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(258 90% 66%) 100%);\n  }\n\n  .gradient-accent {\n    background: linear-gradient(135deg, hsl(var(--accent)) 0%, hsl(var(--primary)) 100%);\n  }\n\n  /* Glass morphism effect for premium feel */\n  .glass {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .dark .glass {\n    background: rgba(0, 0, 0, 0.2);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n}\n","size_bytes":12098},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/pages/TeamsManagement.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Users, Plus, Trash2, ArrowRight, Sparkles, Bot, Layers } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Team } from \"@shared/schema\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function TeamsManagement() {\n  const { toast } = useToast();\n\n  const { data: teams = [], isLoading } = useQuery<Team[]>({\n    queryKey: [\"/api/teams\"],\n  });\n\n  const deleteTeamMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/teams/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\"] });\n      toast({\n        title: \"Success\",\n        description: \"Team deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-muted/30\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-accent border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground font-medium\">Loading your AI teams...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-muted/30\">\n      {/* Hero Header */}\n      <div className=\"border-b bg-card\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-6 sm:py-8\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-xl bg-accent/10 flex items-center justify-center flex-shrink-0\">\n                  <Users className=\"h-5 w-5 sm:h-6 sm:w-6 text-accent\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl sm:text-3xl font-bold tracking-tight\">AI Teams</h1>\n                  <p className=\"text-sm sm:text-base text-muted-foreground hidden sm:block\">\n                    Orchestrate multi-bot collaboration for complex workflows\n                  </p>\n                </div>\n              </div>\n            </div>\n            <Link href=\"/teams/create\" className=\"w-full sm:w-auto\">\n              <Button size=\"lg\" className=\"gap-2 shadow-sm w-full sm:w-auto\" data-testid=\"button-create-new-team\">\n                <Plus className=\"h-5 w-5\" />\n                Create New Team\n              </Button>\n            </Link>\n          </div>\n\n          {/* Stats Bar */}\n          <div className=\"mt-4 sm:mt-6 flex flex-wrap items-center gap-4 sm:gap-6 text-xs sm:text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 rounded-full bg-accent\"></div>\n              <span className=\"text-muted-foreground\">Total Teams:</span>\n              <span className=\"font-semibold\">{teams.length}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 rounded-full bg-success\"></div>\n              <span className=\"text-muted-foreground\">Collaborative Groups:</span>\n              <span className=\"font-semibold\">{teams.length}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 py-6 sm:py-8\">\n        {teams.length === 0 ? (\n          <Card className=\"border-dashed border-2\">\n            <CardContent className=\"py-16 text-center\">\n              <div className=\"w-20 h-20 rounded-2xl bg-accent/10 flex items-center justify-center mx-auto mb-6\">\n                <Users className=\"h-10 w-10 text-accent\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-2\">No AI teams yet</h3>\n              <p className=\"text-muted-foreground mb-8 max-w-md mx-auto\">\n                Create your first AI team by selecting multiple bots to collaborate on complex tasks. \n                Each bot brings unique capabilities to solve problems together.\n              </p>\n              <Link href=\"/teams/create\">\n                <Button size=\"lg\" className=\"gap-2\">\n                  <Plus className=\"h-5 w-5\" />\n                  Create Your First Team\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {teams.map((team) => (\n              <Card \n                key={team.id} \n                className=\"hover-elevate border-border/50 overflow-hidden group\" \n                data-testid={`card-team-${team.id}`}\n              >\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-start justify-between gap-3 mb-3\">\n                    <div className=\"w-14 h-14 rounded-xl bg-gradient-accent flex items-center justify-center flex-shrink-0 shadow-sm\">\n                      <Users className=\"h-7 w-7 text-primary-foreground\" />\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            data-testid={`button-delete-team-${team.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-muted-foreground\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete AI Team</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete \"<strong>{team.name}</strong>\"? \n                              This will remove all team configurations and conversations. This action cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => deleteTeamMutation.mutate(team.id)}\n                              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                            >\n                              Delete Team\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n\n                  <CardTitle className=\"text-xl mb-2\">{team.name}</CardTitle>\n                  <Badge variant=\"outline\" className=\"w-fit text-xs\">\n                    <Bot className=\"h-3 w-3 mr-1\" />\n                    Multi-Bot Collaboration\n                  </Badge>\n                </CardHeader>\n\n                <CardContent className=\"space-y-4\">\n                  {/* Description */}\n                  {team.description && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2 leading-relaxed\">\n                      {team.description}\n                    </p>\n                  )}\n\n                  {/* Team Info Badge */}\n                  <div className=\"flex items-center gap-2 p-3 rounded-lg bg-muted/50 border border-border/50\">\n                    <Layers className=\"h-4 w-4 text-accent flex-shrink-0\" />\n                    <span className=\"text-sm font-medium\">\n                      Collaborative AI Workspace\n                    </span>\n                  </div>\n\n\n                  {/* Open Workspace Button */}\n                  <Link href={`/teams/${team.id}`}>\n                    <Button \n                      className=\"w-full gap-2\" \n                      data-testid={`button-open-team-${team.id}`}\n                    >\n                      Open Workspace\n                      <ArrowRight className=\"h-4 w-4\" />\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Info Banner */}\n        {teams.length > 0 && (\n          <Card className=\"mt-8 border-accent/20 bg-accent/5\">\n            <CardContent className=\"py-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"w-10 h-10 rounded-lg bg-accent/10 flex items-center justify-center flex-shrink-0\">\n                  <Sparkles className=\"h-5 w-5 text-accent\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold mb-1\">Power of Team Collaboration</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    AI teams enable multiple specialized bots to work together on complex tasks. \n                    Each bot contributes its unique perspective and capabilities, delivering richer, \n                    more comprehensive results than any single AI model could achieve alone.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10012},"client/src/pages/Outputs.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { FileText, Trash2, Calendar, Users, Bot as BotIcon, Archive, Sparkles, Layers } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { Output } from \"@shared/schema\";\nimport { useState } from \"react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function Outputs() {\n  const { toast } = useToast();\n  const [selectedOutput, setSelectedOutput] = useState<Output | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [outputToDelete, setOutputToDelete] = useState<string | null>(null);\n\n  const { data: outputs = [], isLoading } = useQuery<Output[]>({\n    queryKey: [\"/api/outputs\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/outputs/${id}`);\n      if (!response.ok) {\n        throw new Error(\"Failed to delete output\");\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/outputs\"] });\n      toast({\n        title: \"Deleted\",\n        description: \"Output deleted successfully\",\n      });\n      if (selectedOutput?.id === outputToDelete) {\n        setSelectedOutput(null);\n      }\n      setDeleteDialogOpen(false);\n      setOutputToDelete(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete output\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (id: string) => {\n    setOutputToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (outputToDelete) {\n      deleteMutation.mutate(outputToDelete);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-muted/30\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-success border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground font-medium\">Loading your saved outputs...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-muted/30\">\n      {/* Hero Header */}\n      <div className=\"border-b bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6 py-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 rounded-xl bg-success/10 flex items-center justify-center\">\n                  <Archive className=\"h-6 w-6 text-success\" />\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold tracking-tight\">Output Library</h1>\n                  <p className=\"text-muted-foreground\">\n                    Browse and manage your AI collaboration results\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-4 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 rounded-full bg-success\"></div>\n                <span className=\"text-muted-foreground\">Total Saved:</span>\n                <span className=\"font-semibold\">{outputs.length}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        {outputs.length === 0 ? (\n          <Card className=\"border-dashed border-2\">\n            <CardContent className=\"py-16 text-center\">\n              <div className=\"w-20 h-20 rounded-2xl bg-success/10 flex items-center justify-center mx-auto mb-6\">\n                <FileText className=\"h-10 w-10 text-success\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-2\">No saved outputs yet</h3>\n              <p className=\"text-muted-foreground mb-8 max-w-md mx-auto\">\n                Execute team tasks in the Team Workspace and save the results to build your output library\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Outputs List */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"border-border/50\">\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"flex items-center gap-2 text-lg\">\n                    <FileText className=\"h-5 w-5 text-success\" />\n                    Saved Results\n                  </CardTitle>\n                  <CardDescription>\n                    {outputs.length} output{outputs.length !== 1 ? \"s\" : \"\"} in your library\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <ScrollArea className=\"h-[650px] px-6\">\n                    <div className=\"space-y-3 pb-4\">\n                      {outputs.map((output) => (\n                        <Card\n                          key={output.id}\n                          className={`cursor-pointer transition-all hover-elevate border-border/50 ${\n                            selectedOutput?.id === output.id ? \"border-success shadow-sm bg-success/5\" : \"\"\n                          }`}\n                          onClick={() => setSelectedOutput(output)}\n                          data-testid={`card-output-${output.id}`}\n                        >\n                          <CardHeader className=\"p-4 space-y-0 pb-3\">\n                            <h4 className=\"font-semibold text-sm line-clamp-1\">{output.title}</h4>\n                            <div className=\"flex items-center gap-2 text-xs text-muted-foreground mt-2\">\n                              <Calendar className=\"h-3 w-3\" />\n                              {output.createdAt ? format(new Date(output.createdAt), \"MMM d, yyyy\") : \"Unknown\"}\n                            </div>\n                          </CardHeader>\n                          <CardContent className=\"p-4 pt-0 space-y-2\">\n                            <p className=\"text-xs text-muted-foreground line-clamp-2 leading-relaxed\">\n                              {output.brief}\n                            </p>\n                            <div className=\"flex items-center justify-between pt-2 border-t border-border/50\">\n                              <Badge variant=\"secondary\" className=\"text-xs gap-1\">\n                                <Users className=\"h-3 w-3\" />\n                                {Array.isArray(output.responses) ? output.responses.length : 0} bots\n                              </Badge>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-7 w-7\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleDelete(output.id);\n                                }}\n                                data-testid={`button-delete-${output.id}`}\n                              >\n                                <Trash2 className=\"h-3.5 w-3.5 text-muted-foreground\" />\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Output Detail */}\n            <div className=\"lg:col-span-2\">\n              {selectedOutput ? (\n                <Card className=\"border-border/50\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <Sparkles className=\"h-5 w-5 text-success\" />\n                          <CardTitle className=\"text-2xl\">{selectedOutput.title}</CardTitle>\n                        </div>\n                        <CardDescription className=\"flex items-center gap-2\">\n                          <Calendar className=\"h-3.5 w-3.5\" />\n                          {selectedOutput.createdAt\n                            ? format(new Date(selectedOutput.createdAt), \"MMMM d, yyyy 'at' h:mm a\")\n                            : \"Unknown date\"}\n                        </CardDescription>\n                      </div>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(selectedOutput.id)}\n                        data-testid=\"button-delete-selected\"\n                        className=\"gap-2\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                        Delete\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {/* Brief */}\n                    <div className=\"space-y-3\">\n                      <h3 className=\"font-semibold flex items-center gap-2\">\n                        <FileText className=\"h-4 w-4 text-primary\" />\n                        Original Brief\n                      </h3>\n                      <Card className=\"bg-muted/50 border-border/50\">\n                        <CardContent className=\"pt-4\">\n                          <p className=\"text-sm whitespace-pre-wrap leading-relaxed\">{selectedOutput.brief}</p>\n                        </CardContent>\n                      </Card>\n                    </div>\n\n                    <Separator />\n\n                    {/* Responses */}\n                    <div className=\"space-y-4\">\n                      <h3 className=\"font-semibold flex items-center gap-2\">\n                        <Users className=\"h-4 w-4 text-accent\" />\n                        AI Team Responses\n                      </h3>\n                      <Tabs defaultValue=\"combined\" className=\"w-full\">\n                        <TabsList className=\"grid w-full grid-cols-auto\">\n                          <TabsTrigger value=\"combined\" data-testid=\"tab-combined\" className=\"gap-2\">\n                            <Layers className=\"h-3 w-3\" />\n                            Combined\n                          </TabsTrigger>\n                          {Array.isArray(selectedOutput.responses) &&\n                            (selectedOutput.responses as any[]).map((response: any, idx: number) => (\n                              <TabsTrigger\n                                key={response.botId || idx}\n                                value={response.botId || `bot-${idx}`}\n                                data-testid={`tab-bot-${response.botId || idx}`}\n                                className=\"gap-2\"\n                              >\n                                <BotIcon className=\"h-3 w-3\" />\n                                {response.botName || `Bot ${idx + 1}`}\n                              </TabsTrigger>\n                            ))}\n                        </TabsList>\n\n                        <TabsContent value=\"combined\" data-testid=\"content-combined\" className=\"mt-4\">\n                          <Card className=\"bg-muted/30 border-border/50\">\n                            <CardContent className=\"pt-6\">\n                              {selectedOutput.combinedOutput ? (\n                                <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n                                  <p className=\"whitespace-pre-wrap leading-relaxed\">{selectedOutput.combinedOutput}</p>\n                                </div>\n                              ) : (\n                                <div className=\"space-y-6\">\n                                  {Array.isArray(selectedOutput.responses) &&\n                                    (selectedOutput.responses as any[]).map((response: any, idx: number) => (\n                                      <div key={response.botId || idx} className=\"space-y-3\">\n                                        <div className=\"flex items-center gap-3\">\n                                          <div className=\"w-8 h-8 rounded-lg bg-primary/10 flex items-center justify-center\">\n                                            <BotIcon className=\"h-4 w-4 text-primary\" />\n                                          </div>\n                                          <div className=\"flex-1\">\n                                            <span className=\"font-semibold text-sm\">\n                                              {response.botName || `Bot ${idx + 1}`}\n                                            </span>\n                                            {response.task && (\n                                              <p className=\"text-xs text-muted-foreground\">Task: {response.task}</p>\n                                            )}\n                                          </div>\n                                          {response.status === \"error\" && (\n                                            <Badge variant=\"destructive\" className=\"text-xs\">Error</Badge>\n                                          )}\n                                        </div>\n                                        {response.status === \"error\" && response.error ? (\n                                          <Card className=\"bg-destructive/5 border-destructive/20\">\n                                            <CardContent className=\"pt-4\">\n                                              <p className=\"text-sm text-destructive\">{response.error}</p>\n                                            </CardContent>\n                                          </Card>\n                                        ) : (\n                                          <p className=\"text-sm whitespace-pre-wrap leading-relaxed pl-11\">\n                                            {response.output}\n                                          </p>\n                                        )}\n                                        {idx < (selectedOutput.responses as any[]).length - 1 && (\n                                          <Separator className=\"my-4\" />\n                                        )}\n                                      </div>\n                                    ))}\n                                </div>\n                              )}\n                            </CardContent>\n                          </Card>\n                        </TabsContent>\n\n                        {Array.isArray(selectedOutput.responses) &&\n                          (selectedOutput.responses as any[]).map((response: any, idx: number) => (\n                            <TabsContent\n                              key={response.botId || idx}\n                              value={response.botId || `bot-${idx}`}\n                              data-testid={`content-bot-${response.botId || idx}`}\n                              className=\"mt-4\"\n                            >\n                              <Card className=\"bg-muted/30 border-border/50\">\n                                <CardHeader className=\"pb-4\">\n                                  <div className=\"flex items-start gap-3\">\n                                    <div className=\"w-12 h-12 rounded-xl bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                                      <BotIcon className=\"h-6 w-6 text-primary\" />\n                                    </div>\n                                    <div className=\"flex-1\">\n                                      <CardTitle className=\"text-lg\">\n                                        {response.botName || `Bot ${idx + 1}`}\n                                      </CardTitle>\n                                      {response.task && (\n                                        <CardDescription className=\"mt-1\">\n                                          <span className=\"font-medium\">Task:</span> {response.task}\n                                        </CardDescription>\n                                      )}\n                                    </div>\n                                    {response.status === \"error\" && (\n                                      <Badge variant=\"destructive\">Error</Badge>\n                                    )}\n                                  </div>\n                                </CardHeader>\n                                <CardContent>\n                                  {response.status === \"error\" && response.error ? (\n                                    <Card className=\"bg-destructive/5 border-destructive/20\">\n                                      <CardContent className=\"pt-4\">\n                                        <p className=\"text-sm text-destructive\">{response.error}</p>\n                                      </CardContent>\n                                    </Card>\n                                  ) : (\n                                    <div className=\"prose prose-sm dark:prose-invert max-w-none\">\n                                      <p className=\"whitespace-pre-wrap leading-relaxed\">{response.output}</p>\n                                    </div>\n                                  )}\n                                </CardContent>\n                              </Card>\n                            </TabsContent>\n                          ))}\n                      </Tabs>\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                <Card className=\"border-dashed border-2 border-border/50\">\n                  <CardContent className=\"py-16 text-center\">\n                    <div className=\"w-16 h-16 rounded-2xl bg-muted flex items-center justify-center mx-auto mb-4\">\n                      <FileText className=\"h-8 w-8 text-muted-foreground\" />\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2\">Select an output</h3>\n                    <p className=\"text-muted-foreground max-w-sm mx-auto\">\n                      Choose an output from the list on the left to view its complete details and team responses\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete saved output?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete this AI collaboration result from your library.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDelete}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":20028},"client/src/components/ChatInterface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Send, Bot, User } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Message } from \"@shared/schema\";\n\ninterface ChatInterfaceProps {\n  title: string;\n  chatType: \"bot\" | \"team\";\n  entityId: string; // botId or teamId\n  conversationId?: string;\n  onConversationCreated?: (conversationId: string) => void;\n}\n\nexport function ChatInterface({ \n  title, \n  chatType, \n  entityId,\n  conversationId: initialConversationId,\n  onConversationCreated \n}: ChatInterfaceProps) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [conversationId, setConversationId] = useState<string | undefined>(initialConversationId);\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  // Load existing conversation history if conversationId is provided\n  const { data: existingMessages } = useQuery<Message[]>({\n    queryKey: [`/api/conversations/${conversationId}/messages`],\n    enabled: !!conversationId,\n  });\n\n  // Clear messages and reset conversation ID when entity changes (switching between bots/teams)\n  useEffect(() => {\n    setMessages([]);\n    setInput(\"\");\n    setConversationId(undefined);\n  }, [entityId]);\n\n  // Sync local conversationId with prop changes (including undefined for entities with no history)\n  useEffect(() => {\n    setConversationId(initialConversationId);\n  }, [initialConversationId, entityId]);\n\n  // Update messages when existing conversation is loaded (including empty conversations)\n  useEffect(() => {\n    if (existingMessages !== undefined) {\n      setMessages(existingMessages);\n    }\n  }, [existingMessages]);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const endpoint = chatType === \"bot\" \n        ? `/api/bots/${entityId}/chat`\n        : `/api/teams/${entityId}/chat`;\n      \n      return await apiRequest(\"POST\", endpoint, {\n        message,\n        conversationId,\n      });\n    },\n    onSuccess: (data: any) => {\n      // Ensure messages is always an array\n      setMessages(data.messages || []);\n      if (!conversationId && data.conversationId) {\n        setConversationId(data.conversationId);\n        onConversationCreated?.(data.conversationId);\n        // Invalidate conversations query to refresh the list\n        queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      }\n      // Invalidate messages query to refetch\n      if (data.conversationId) {\n        queryClient.invalidateQueries({ \n          queryKey: [`/api/conversations/${data.conversationId}/messages`] \n        });\n      }\n      setInput(\"\");\n    },\n    onError: (error: any) => {\n      // Add error message to chat\n      const errorMessage = error?.message || \"Failed to send message\";\n      setMessages(prev => [\n        ...prev,\n        {\n          id: Date.now().toString(),\n          conversationId: conversationId || \"\",\n          role: \"assistant\",\n          content: `⚠️ ${errorMessage}`,\n          botId: null,\n          createdAt: new Date(),\n        } as any,\n      ]);\n    },\n  });\n\n  const handleSend = () => {\n    if (!input.trim() || sendMessageMutation.isPending) return;\n    sendMessageMutation.mutate(input);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <Card className=\"flex flex-col h-full\">\n      <CardHeader className=\"pb-3 border-b\">\n        <CardTitle className=\"text-lg flex items-center gap-2\">\n          <Bot className=\"h-5 w-5 text-primary\" />\n          {title}\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 flex flex-col p-0 overflow-hidden\">\n        <ScrollArea className=\"flex-1 p-4\" ref={scrollRef}>\n          <div className=\"space-y-4\">\n            {!messages || messages.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Bot className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                <p>Start a conversation...</p>\n              </div>\n            ) : (\n              messages.map((message, index) => (\n                <div\n                  key={index}\n                  className={`flex gap-3 ${\n                    message.role === \"user\" ? \"justify-end\" : \"justify-start\"\n                  }`}\n                  data-testid={`message-${message.role}-${index}`}\n                >\n                  {message.role === \"assistant\" && (\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <Bot className=\"h-4 w-4 text-primary\" />\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div\n                    className={`rounded-lg px-4 py-2 max-w-[90%] sm:max-w-[80%] ${\n                      message.role === \"user\"\n                        ? \"bg-primary text-primary-foreground\"\n                        : \"bg-muted\"\n                    }`}\n                  >\n                    <p className=\"text-sm whitespace-pre-wrap break-words\">\n                      {message.content}\n                    </p>\n                  </div>\n\n                  {message.role === \"user\" && (\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-8 h-8 rounded-full bg-primary flex items-center justify-center\">\n                        <User className=\"h-4 w-4 text-primary-foreground\" />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))\n            )}\n            \n            {sendMessageMutation.isPending && (\n              <div className=\"flex gap-3 justify-start\" data-testid=\"message-loading\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                    <Bot className=\"h-4 w-4 text-primary animate-pulse\" />\n                  </div>\n                </div>\n                <div className=\"rounded-lg px-4 py-2 bg-muted\">\n                  <div className=\"flex gap-1\">\n                    <div className=\"w-2 h-2 rounded-full bg-muted-foreground/50 animate-bounce\" style={{ animationDelay: \"0ms\" }} />\n                    <div className=\"w-2 h-2 rounded-full bg-muted-foreground/50 animate-bounce\" style={{ animationDelay: \"150ms\" }} />\n                    <div className=\"w-2 h-2 rounded-full bg-muted-foreground/50 animate-bounce\" style={{ animationDelay: \"300ms\" }} />\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n\n        <div className=\"p-3 sm:p-4 border-t\">\n          <div className=\"flex flex-col sm:flex-row gap-2\">\n            <Textarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyDown}\n              placeholder={chatType === \"team\" ? \"Ask the team...\" : \"Type your message...\"}\n              className=\"min-h-[60px] resize-none flex-1\"\n              disabled={sendMessageMutation.isPending}\n              data-testid=\"textarea-chat-input\"\n            />\n            <Button\n              onClick={handleSend}\n              disabled={!input.trim() || sendMessageMutation.isPending}\n              size=\"icon\"\n              className=\"h-[60px] w-full sm:w-[60px] flex-shrink-0\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8279},"client/src/pages/TeamCollaborationWorkspace.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { \n  Users, \n  MessageSquare, \n  Play, \n  CheckCircle2, \n  XCircle, \n  Loader2,\n  ArrowRight,\n  Bot,\n  User as UserIcon,\n  ThumbsUp,\n  ThumbsDown,\n  AlertCircle\n} from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Team, Bot as BotType, TeamSession } from \"@shared/schema\";\n\ninterface PlanningMessage {\n  speaker: \"bot\" | \"user\";\n  botId?: string;\n  botName?: string;\n  content: string;\n  timestamp: string;\n}\n\ninterface TaskAssignment {\n  botId: string;\n  botName: string;\n  task: string;\n}\n\ninterface ExecutionOutput {\n  botId: string;\n  botName: string;\n  task: string;\n  output: string;\n  status: \"success\" | \"error\";\n  error?: string;\n}\n\ninterface Suggestion {\n  id: string;\n  botId: string;\n  botName: string;\n  type: \"iteration\" | \"critique\";\n  target?: string;\n  content: string;\n  status: \"pending\" | \"approved\" | \"rejected\";\n  timestamp: string;\n}\n\nexport default function TeamCollaborationWorkspace() {\n  const [, params] = useRoute(\"/teams/:id/collaborate\");\n  const [, setLocation] = useLocation();\n  const teamId = params?.id;\n  const { toast } = useToast();\n  \n  // Session state\n  const [sessionId, setSessionId] = useState<string | undefined>(undefined);\n  const [sessionTitle, setSessionTitle] = useState(\"\");\n  const [brief, setBrief] = useState(\"\");\n  const [currentPhase, setCurrentPhase] = useState<\"planning\" | \"execution\" | \"review\" | \"completed\">(\"planning\");\n  const [showSessionList, setShowSessionList] = useState(false);\n  const [hasAutoLoaded, setHasAutoLoaded] = useState(false);\n  \n  // Planning phase state\n  const [planningMessages, setPlanningMessages] = useState<PlanningMessage[]>([]);\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [taskAssignments, setTaskAssignments] = useState<Record<string, string>>({});\n  \n  // Execution phase state\n  const [executionOutputs, setExecutionOutputs] = useState<ExecutionOutput[]>([]);\n  \n  // Review phase state\n  const [reviewMessages, setReviewMessages] = useState<PlanningMessage[]>([]);\n  const [userReviewMessage, setUserReviewMessage] = useState(\"\");\n  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\n\n  const { data: team, isLoading: teamLoading } = useQuery<Team>({\n    queryKey: [`/api/teams/${teamId}`],\n    enabled: !!teamId,\n  });\n\n  const { data: teamBots = [], isLoading: botsLoading } = useQuery<BotType[]>({\n    queryKey: [`/api/teams/${teamId}/bots`],\n    enabled: !!teamId,\n  });\n\n  // Fetch existing sessions for the team\n  const { data: existingSessions = [], isLoading: sessionsLoading } = useQuery<TeamSession[]>({\n    queryKey: [`/api/teams/${teamId}/sessions`],\n    enabled: !!teamId,\n  });\n\n  const { data: session, refetch: refetchSession } = useQuery<TeamSession>({\n    queryKey: [`/api/team-sessions/${sessionId}`],\n    enabled: !!sessionId,\n  });\n\n  // Auto-load latest incomplete session on mount (only once, and only if user hasn't made a choice)\n  useEffect(() => {\n    if (!sessionId && !hasAutoLoaded && !showSessionList && existingSessions.length > 0 && !sessionsLoading) {\n      // Find the latest incomplete session\n      const incompleteSession = existingSessions.find(s => s.phase !== \"completed\");\n      if (incompleteSession) {\n        setSessionId(incompleteSession.id);\n      } else {\n        // All sessions are completed, show session list\n        setShowSessionList(true);\n      }\n      setHasAutoLoaded(true);\n    }\n  }, [existingSessions, sessionId, sessionsLoading, hasAutoLoaded, showSessionList]);\n\n  // Sync session data to local state when loaded\n  useEffect(() => {\n    if (session) {\n      setBrief(session.brief);\n      setCurrentPhase(session.phase as any);\n      setPlanningMessages((session.planningMessages as PlanningMessage[]) || []);\n      setTaskAssignments(\n        ((session.taskAssignments as TaskAssignment[]) || []).reduce((acc, ta) => {\n          acc[ta.botId] = ta.task;\n          return acc;\n        }, {} as Record<string, string>)\n      );\n      setExecutionOutputs((session.executionOutputs as ExecutionOutput[]) || []);\n      setReviewMessages((session.reviewMessages as PlanningMessage[]) || []);\n      setSuggestions((session.suggestions as Suggestion[]) || []);\n    }\n  }, [session]);\n\n  const createSessionMutation = useMutation({\n    mutationFn: async (data: { title: string; brief: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/team-sessions\", {\n        teamId,\n        title: data.title,\n        brief: data.brief,\n        phase: \"planning\",\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setSessionId(data.id);\n      toast({\n        title: \"Session Created\",\n        description: \"Collaborative session started successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create session\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addPlanningMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const response = await apiRequest(\"POST\", `/api/team-sessions/${sessionId}/planning-message`, {\n        speaker: \"user\",\n        content,\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setPlanningMessages((data.planningMessages as PlanningMessage[]) || []);\n      setUserMessage(\"\");\n      refetchSession();\n    },\n  });\n\n  const botQuestionMutation = useMutation({\n    mutationFn: async (botId: string) => {\n      const response = await apiRequest(\"POST\", `/api/team-sessions/${sessionId}/planning/bot-question`, {\n        botId,\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setPlanningMessages((data.session.planningMessages as PlanningMessage[]) || []);\n      refetchSession();\n      toast({\n        title: \"Bot Question Generated\",\n        description: \"The bot has asked a clarifying question\",\n      });\n    },\n  });\n\n  const finalizePlanningMutation = useMutation({\n    mutationFn: async () => {\n      const assignments: TaskAssignment[] = teamBots.map(bot => ({\n        botId: bot.id,\n        botName: bot.name,\n        task: taskAssignments[bot.id] || \"Contribute to the project based on your expertise\",\n      }));\n\n      const response = await apiRequest(\"POST\", `/api/team-sessions/${sessionId}/finalize-planning`, {\n        taskAssignments: assignments,\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentPhase(\"execution\");\n      refetchSession();\n      toast({\n        title: \"Planning Complete\",\n        description: \"Moving to execution phase\",\n      });\n    },\n  });\n\n  const executeTasksMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/team-sessions/${sessionId}/execute`, {});\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setExecutionOutputs(data.responses);\n      setCurrentPhase(\"review\");\n      refetchSession();\n      toast({\n        title: \"Execution Complete\",\n        description: \"All bots have completed their tasks. Moving to review phase.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Execution Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addReviewMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const response = await apiRequest(\"POST\", `/api/team-sessions/${sessionId}/review-message`, {\n        speaker: \"user\",\n        content,\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setReviewMessages((data.reviewMessages as PlanningMessage[]) || []);\n      setUserReviewMessage(\"\");\n      refetchSession();\n    },\n  });\n\n  const approveSuggestionMutation = useMutation({\n    mutationFn: async ({ suggestionId, status }: { suggestionId: string; status: \"approved\" | \"rejected\" }) => {\n      const response = await apiRequest(\"PATCH\", `/api/team-sessions/${sessionId}/suggestion/${suggestionId}`, {\n        status,\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setSuggestions((data.suggestions as Suggestion[]) || []);\n      refetchSession();\n      toast({\n        title: \"Suggestion Updated\",\n        description: \"Your decision has been recorded\",\n      });\n    },\n  });\n\n  const completeSessionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/team-sessions/${sessionId}/complete`, {});\n      return await response.json();\n    },\n    onSuccess: () => {\n      setCurrentPhase(\"completed\");\n      queryClient.invalidateQueries({ queryKey: [`/api/teams/${teamId}/sessions`] });\n      toast({\n        title: \"Session Complete\",\n        description: \"Collaborative session has been completed successfully\",\n      });\n    },\n  });\n\n  const handleStartSession = () => {\n    if (!sessionTitle.trim() || !brief.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide both a title and brief\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createSessionMutation.mutate({ title: sessionTitle, brief });\n    setShowSessionList(false);\n    setHasAutoLoaded(true); // User explicitly created a session\n  };\n\n  const handleLoadSession = (session: TeamSession) => {\n    setSessionId(session.id);\n    setShowSessionList(false);\n    setHasAutoLoaded(true); // User explicitly chose a session\n  };\n\n  const handleNewSession = () => {\n    setSessionId(undefined);\n    setSessionTitle(\"\");\n    setBrief(\"\");\n    setShowSessionList(false);\n    setHasAutoLoaded(true); // User explicitly chose to create new session\n  };\n\n  const handleBotAskQuestion = (botId: string) => {\n    botQuestionMutation.mutate(botId);\n  };\n\n  const handleSendPlanningMessage = () => {\n    if (!userMessage.trim()) return;\n    addPlanningMessageMutation.mutate(userMessage);\n  };\n\n  const handleSendReviewMessage = () => {\n    if (!userReviewMessage.trim()) return;\n    addReviewMessageMutation.mutate(userReviewMessage);\n  };\n\n  if (teamLoading || botsLoading || sessionsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!team) {\n    return (\n      <div className=\"p-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"text-muted-foreground\">Team not found</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (teamBots.length === 0) {\n    return (\n      <div className=\"p-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center space-y-4\">\n              <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto\" />\n              <div>\n                <p className=\"font-medium\">No Team Members</p>\n                <p className=\"text-sm text-muted-foreground\">Add bots to this team before starting a collaborative session</p>\n              </div>\n              <Button onClick={() => setLocation(`/teams/${teamId}`)} data-testid=\"button-back-to-team\">\n                Back to Team\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">\n            Collaborative Workspace\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {team.name} - Multi-phase team collaboration\n          </p>\n        </div>\n\n        {/* Phase Progress Indicator */}\n        {sessionId && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between gap-4\">\n                <div className={`flex items-center gap-2 ${currentPhase === \"planning\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentPhase === \"planning\" ? \"bg-primary text-primary-foreground\" : \"bg-muted\"}`}>\n                    1\n                  </div>\n                  <span className=\"font-medium\">Planning</span>\n                </div>\n                <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n                <div className={`flex items-center gap-2 ${currentPhase === \"execution\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentPhase === \"execution\" ? \"bg-primary text-primary-foreground\" : \"bg-muted\"}`}>\n                    2\n                  </div>\n                  <span className=\"font-medium\">Execution</span>\n                </div>\n                <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n                <div className={`flex items-center gap-2 ${currentPhase === \"review\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentPhase === \"review\" ? \"bg-primary text-primary-foreground\" : \"bg-muted\"}`}>\n                    3\n                  </div>\n                  <span className=\"font-medium\">Review</span>\n                </div>\n                <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n                <div className={`flex items-center gap-2 ${currentPhase === \"completed\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${currentPhase === \"completed\" ? \"bg-primary text-primary-foreground\" : \"bg-muted\"}`}>\n                    <CheckCircle2 className=\"h-4 w-4\" />\n                  </div>\n                  <span className=\"font-medium\">Complete</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Session Selection or Creation */}\n        {!sessionId && showSessionList && existingSessions.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Choose Session\n              </CardTitle>\n              <CardDescription>\n                Resume an existing session or start a new one\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Existing Sessions */}\n              <div className=\"space-y-3\">\n                <p className=\"text-sm font-medium\">Existing Sessions:</p>\n                {existingSessions.map(session => (\n                  <Card key={session.id} className=\"hover-elevate cursor-pointer\" onClick={() => handleLoadSession(session)}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between gap-3\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium mb-1\" data-testid={`text-session-title-${session.id}`}>\n                            {session.title}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground line-clamp-2 mb-2\">\n                            {session.brief}\n                          </p>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant={session.phase === \"completed\" ? \"secondary\" : \"default\"}>\n                              {session.phase}\n                            </Badge>\n                            {session.createdAt && (\n                              <span className=\"text-xs text-muted-foreground\">\n                                {new Date(session.createdAt).toLocaleDateString()}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleLoadSession(session);\n                          }}\n                          data-testid={`button-load-${session.id}`}\n                        >\n                          {session.phase === \"completed\" ? \"View\" : \"Resume\"}\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n              <Separator />\n              <Button\n                onClick={() => {\n                  handleNewSession();\n                  setHasAutoLoaded(true); // User explicitly chose to start new session\n                }}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-new-session-switch\"\n              >\n                <Play className=\"h-4 w-4 mr-2\" />\n                Start New Session\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Session Creation Form (if no session selected and not showing list) */}\n        {!sessionId && !showSessionList && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between gap-4\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"h-5 w-5\" />\n                    Start Collaborative Session\n                  </CardTitle>\n                  <CardDescription>\n                    Create a new session where your team will work together through planning, execution, and review\n                  </CardDescription>\n                </div>\n                {existingSessions.length > 0 && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setShowSessionList(true);\n                      setHasAutoLoaded(true); // User explicitly chose to view sessions\n                    }}\n                    data-testid=\"button-show-sessions\"\n                  >\n                    View Existing\n                  </Button>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"session-title\">Session Title</Label>\n                <Input\n                  id=\"session-title\"\n                  placeholder=\"e.g., Website Redesign Project\"\n                  value={sessionTitle}\n                  onChange={(e) => setSessionTitle(e.target.value)}\n                  data-testid=\"input-session-title\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"brief\">Project Brief</Label>\n                <Textarea\n                  id=\"brief\"\n                  placeholder=\"Describe what you want the team to work on...\"\n                  value={brief}\n                  onChange={(e) => setBrief(e.target.value)}\n                  rows={6}\n                  data-testid=\"input-brief\"\n                />\n              </div>\n              <div className=\"p-4 bg-primary/5 border border-primary/20 rounded-lg\">\n                <p className=\"text-sm font-medium mb-2\">Team Members ({teamBots.length})</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {teamBots.map(bot => (\n                    <Badge key={bot.id} variant=\"secondary\" data-testid={`badge-bot-${bot.id}`}>\n                      <Bot className=\"h-3 w-3 mr-1\" />\n                      {bot.name}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n              <Button\n                onClick={handleStartSession}\n                disabled={createSessionMutation.isPending}\n                size=\"lg\"\n                className=\"w-full\"\n                data-testid=\"button-start-session\"\n              >\n                {createSessionMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" />\n                    Creating Session...\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"h-5 w-5 mr-2\" />\n                    Start Collaborative Session\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* PLANNING PHASE */}\n        {sessionId && currentPhase === \"planning\" && (\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"h-5 w-5\" />\n                  Planning Phase\n                </CardTitle>\n                <CardDescription>\n                  Discuss the brief with your team, answer their questions, and assign specific tasks\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Brief Display */}\n                <div className=\"p-4 bg-muted rounded-lg\">\n                  <p className=\"text-sm font-medium mb-2\">Project Brief:</p>\n                  <p className=\"text-sm text-foreground\">{brief}</p>\n                </div>\n\n                {/* Bot Question Buttons */}\n                <div>\n                  <p className=\"text-sm font-medium mb-3\">Ask bots for their questions:</p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {teamBots.map(bot => (\n                      <Button\n                        key={bot.id}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleBotAskQuestion(bot.id)}\n                        disabled={botQuestionMutation.isPending}\n                        data-testid={`button-ask-${bot.id}`}\n                      >\n                        <Bot className=\"h-3 w-3 mr-1\" />\n                        Ask {bot.name}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Planning Conversation */}\n                {planningMessages.length > 0 && (\n                  <div className=\"space-y-3\">\n                    <Separator />\n                    <p className=\"text-sm font-medium\">Planning Discussion:</p>\n                    <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                      {planningMessages.map((msg, idx) => (\n                        <div\n                          key={idx}\n                          className={`p-3 rounded-lg ${\n                            msg.speaker === \"user\"\n                              ? \"bg-primary/10 ml-4 sm:ml-12\"\n                              : \"bg-muted mr-4 sm:mr-12\"\n                          }`}\n                          data-testid={`message-planning-${idx}`}\n                        >\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            {msg.speaker === \"user\" ? (\n                              <UserIcon className=\"h-4 w-4\" />\n                            ) : (\n                              <Bot className=\"h-4 w-4\" />\n                            )}\n                            <span className=\"text-sm font-medium\">\n                              {msg.speaker === \"user\" ? \"You\" : msg.botName}\n                            </span>\n                          </div>\n                          <p className=\"text-sm\">{msg.content}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* User Message Input */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"user-message\">Your Response / Message</Label>\n                  <div className=\"flex flex-col sm:flex-row gap-2\">\n                    <Textarea\n                      id=\"user-message\"\n                      placeholder=\"Answer questions or provide clarification...\"\n                      value={userMessage}\n                      onChange={(e) => setUserMessage(e.target.value)}\n                      rows={3}\n                      className=\"flex-1\"\n                      data-testid=\"input-user-message\"\n                    />\n                    <Button\n                      onClick={handleSendPlanningMessage}\n                      disabled={!userMessage.trim() || addPlanningMessageMutation.isPending}\n                      className=\"sm:self-start\"\n                      data-testid=\"button-send-message\"\n                    >\n                      Send\n                    </Button>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Task Assignments */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <p className=\"text-sm font-medium mb-1\">Assign Specific Tasks</p>\n                    <p className=\"text-sm text-muted-foreground\">Define what each bot should do</p>\n                  </div>\n                  {teamBots.map(bot => (\n                    <div key={bot.id} className=\"space-y-2\">\n                      <Label htmlFor={`task-${bot.id}`}>\n                        {bot.name} ({bot.role || \"General Assistant\"})\n                      </Label>\n                      <Textarea\n                        id={`task-${bot.id}`}\n                        placeholder={`Task for ${bot.name}...`}\n                        value={taskAssignments[bot.id] || \"\"}\n                        onChange={(e) => setTaskAssignments(prev => ({\n                          ...prev,\n                          [bot.id]: e.target.value\n                        }))}\n                        rows={2}\n                        data-testid={`input-task-${bot.id}`}\n                      />\n                    </div>\n                  ))}\n                </div>\n\n                {/* Finalize Planning Button */}\n                <Button\n                  onClick={() => finalizePlanningMutation.mutate()}\n                  disabled={finalizePlanningMutation.isPending || Object.values(taskAssignments).every(t => !t.trim())}\n                  size=\"lg\"\n                  className=\"w-full\"\n                  data-testid=\"button-finalize-planning\"\n                >\n                  {finalizePlanningMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" />\n                      Finalizing...\n                    </>\n                  ) : (\n                    <>\n                      <ArrowRight className=\"h-5 w-5 mr-2\" />\n                      Finalize Planning & Move to Execution\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* EXECUTION PHASE */}\n        {sessionId && currentPhase === \"execution\" && (\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Play className=\"h-5 w-5\" />\n                  Execution Phase\n                </CardTitle>\n                <CardDescription>\n                  Run collaborative execution - bots will work together, each seeing previous teammates' outputs\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Task Assignments Display */}\n                <div className=\"space-y-3\">\n                  <p className=\"text-sm font-medium\">Task Assignments:</p>\n                  {Object.entries(taskAssignments).map(([botId, task]) => {\n                    const bot = teamBots.find(b => b.id === botId);\n                    if (!bot) return null;\n                    return (\n                      <div key={botId} className=\"p-3 bg-muted rounded-lg\" data-testid={`task-display-${botId}`}>\n                        <p className=\"text-sm font-medium mb-1\">{bot.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{task}</p>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                {executionOutputs.length === 0 ? (\n                  <Button\n                    onClick={() => executeTasksMutation.mutate()}\n                    disabled={executeTasksMutation.isPending}\n                    size=\"lg\"\n                    className=\"w-full\"\n                    data-testid=\"button-execute-tasks\"\n                  >\n                    {executeTasksMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" />\n                        Executing Collaboratively...\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"h-5 w-5 mr-2\" />\n                        Execute Team Tasks\n                      </>\n                    )}\n                  </Button>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <p className=\"text-sm font-medium\">Execution Results:</p>\n                    {executionOutputs.map((output, idx) => (\n                      <Card key={idx} data-testid={`output-${output.botId}`}>\n                        <CardHeader>\n                          <div className=\"flex items-center justify-between gap-2\">\n                            <CardTitle className=\"text-base\">{output.botName}</CardTitle>\n                            {output.status === \"success\" ? (\n                              <Badge variant=\"secondary\">\n                                <CheckCircle2 className=\"h-3 w-3 mr-1\" />\n                                Success\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"destructive\">\n                                <XCircle className=\"h-3 w-3 mr-1\" />\n                                Error\n                              </Badge>\n                            )}\n                          </div>\n                          <CardDescription>{output.task}</CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          {output.status === \"success\" ? (\n                            <div className=\"prose prose-sm max-w-none\">\n                              <p className=\"whitespace-pre-wrap text-sm\">{output.output}</p>\n                            </div>\n                          ) : (\n                            <p className=\"text-sm text-destructive\">{output.error}</p>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* REVIEW PHASE */}\n        {sessionId && currentPhase === \"review\" && (\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"h-5 w-5\" />\n                  Review Phase\n                </CardTitle>\n                <CardDescription>\n                  Review outputs, discuss improvements, and approve/reject bot suggestions\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Execution Outputs */}\n                <div className=\"space-y-4\">\n                  <p className=\"text-sm font-medium\">Team Outputs:</p>\n                  {executionOutputs.map((output, idx) => (\n                    <Card key={idx} data-testid={`review-output-${output.botId}`}>\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between gap-2\">\n                          <CardTitle className=\"text-base\">{output.botName}</CardTitle>\n                          {output.status === \"success\" ? (\n                            <Badge variant=\"secondary\">Success</Badge>\n                          ) : (\n                            <Badge variant=\"destructive\">Error</Badge>\n                          )}\n                        </div>\n                        <CardDescription>{output.task}</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        {output.status === \"success\" ? (\n                          <p className=\"whitespace-pre-wrap text-sm\">{output.output}</p>\n                        ) : (\n                          <p className=\"text-sm text-destructive\">{output.error}</p>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                <Separator />\n\n                {/* Review Discussion */}\n                {reviewMessages.length > 0 && (\n                  <div className=\"space-y-3\">\n                    <p className=\"text-sm font-medium\">Review Discussion:</p>\n                    <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                      {reviewMessages.map((msg, idx) => (\n                        <div\n                          key={idx}\n                          className={`p-3 rounded-lg ${\n                            msg.speaker === \"user\"\n                              ? \"bg-primary/10 ml-4 sm:ml-12\"\n                              : \"bg-muted mr-4 sm:mr-12\"\n                          }`}\n                          data-testid={`message-review-${idx}`}\n                        >\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            {msg.speaker === \"user\" ? (\n                              <UserIcon className=\"h-4 w-4\" />\n                            ) : (\n                              <Bot className=\"h-4 w-4\" />\n                            )}\n                            <span className=\"text-sm font-medium\">\n                              {msg.speaker === \"user\" ? \"You\" : msg.botName}\n                            </span>\n                          </div>\n                          <p className=\"text-sm\">{msg.content}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* User Review Input */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"user-review\">Your Feedback / Comments</Label>\n                  <div className=\"flex flex-col sm:flex-row gap-2\">\n                    <Textarea\n                      id=\"user-review\"\n                      placeholder=\"Provide feedback on the outputs, request changes, or ask questions...\"\n                      value={userReviewMessage}\n                      onChange={(e) => setUserReviewMessage(e.target.value)}\n                      rows={3}\n                      className=\"flex-1\"\n                      data-testid=\"input-user-review\"\n                    />\n                    <Button\n                      onClick={handleSendReviewMessage}\n                      disabled={!userReviewMessage.trim() || addReviewMessageMutation.isPending}\n                      className=\"sm:self-start\"\n                      data-testid=\"button-send-review\"\n                    >\n                      Send\n                    </Button>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Suggestions (if any) */}\n                {suggestions.length > 0 && (\n                  <div className=\"space-y-3\">\n                    <p className=\"text-sm font-medium\">Bot Suggestions:</p>\n                    {suggestions.map((suggestion) => (\n                      <Card key={suggestion.id} data-testid={`suggestion-${suggestion.id}`}>\n                        <CardHeader>\n                          <div className=\"flex items-center justify-between gap-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <Bot className=\"h-4 w-4\" />\n                              <span className=\"font-medium text-sm\">{suggestion.botName}</span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {suggestion.type}\n                              </Badge>\n                            </div>\n                            {suggestion.status === \"pending\" ? (\n                              <Badge>Pending</Badge>\n                            ) : suggestion.status === \"approved\" ? (\n                              <Badge variant=\"secondary\">\n                                <ThumbsUp className=\"h-3 w-3 mr-1\" />\n                                Approved\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"destructive\">\n                                <ThumbsDown className=\"h-3 w-3 mr-1\" />\n                                Rejected\n                              </Badge>\n                            )}\n                          </div>\n                        </CardHeader>\n                        <CardContent className=\"space-y-3\">\n                          <p className=\"text-sm\">{suggestion.content}</p>\n                          {suggestion.status === \"pending\" && (\n                            <div className=\"flex gap-2\">\n                              <Button\n                                size=\"sm\"\n                                onClick={() => approveSuggestionMutation.mutate({ suggestionId: suggestion.id, status: \"approved\" })}\n                                disabled={approveSuggestionMutation.isPending}\n                                data-testid={`button-approve-${suggestion.id}`}\n                              >\n                                <ThumbsUp className=\"h-3 w-3 mr-1\" />\n                                Approve\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => approveSuggestionMutation.mutate({ suggestionId: suggestion.id, status: \"rejected\" })}\n                                disabled={approveSuggestionMutation.isPending}\n                                data-testid={`button-reject-${suggestion.id}`}\n                              >\n                                <ThumbsDown className=\"h-3 w-3 mr-1\" />\n                                Reject\n                              </Button>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n\n                {/* Complete Session Button */}\n                <Button\n                  onClick={() => completeSessionMutation.mutate()}\n                  disabled={completeSessionMutation.isPending}\n                  size=\"lg\"\n                  className=\"w-full\"\n                  data-testid=\"button-complete-session\"\n                >\n                  {completeSessionMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" />\n                      Completing...\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle2 className=\"h-5 w-5 mr-2\" />\n                      Complete Session\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* COMPLETED PHASE */}\n        {sessionId && currentPhase === \"completed\" && (\n          <Card>\n            <CardContent className=\"p-8 text-center space-y-4\">\n              <CheckCircle2 className=\"h-16 w-16 text-primary mx-auto\" />\n              <div>\n                <h3 className=\"text-2xl font-bold mb-2\">Session Complete!</h3>\n                <p className=\"text-muted-foreground\">\n                  The collaborative session has been completed successfully\n                </p>\n              </div>\n              <div className=\"flex gap-3 justify-center\">\n                <Button onClick={() => setLocation(`/teams/${teamId}`)} data-testid=\"button-back-team\">\n                  Back to Team\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setSessionId(undefined);\n                    setShowSessionList(true);\n                    setHasAutoLoaded(true);\n                  }} \n                  data-testid=\"button-view-sessions\"\n                >\n                  View All Sessions\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setSessionId(undefined);\n                    setSessionTitle(\"\");\n                    setBrief(\"\");\n                    setShowSessionList(false);\n                    setHasAutoLoaded(true);\n                  }} \n                  data-testid=\"button-new-session\"\n                >\n                  Start New Session\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":41913}},"version":2}